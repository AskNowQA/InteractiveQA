<?xml version="1.0" encoding="UTF-8"?>
<NQSforQALD xmlns="http://github.com/SmartDataAnalytics/InteractiveQA">
<QALDquestions id="1">
<Ques>Give me all cosmonauts.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Astronaut&gt; . { ?uri &lt;http://dbpedia.org/ontology/nationality&gt; &lt;http://dbpedia.org/resource/Russia&gt; . } UNION { ?uri &lt;http://dbpedia.org/ontology/nationality&gt; &lt;http://dbpedia.org/resource/Soviet_Union&gt; . } } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I] =  cosmonauts</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="10">
<Ques>In which country does the Ganges start?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Ganges&gt; &lt;http://dbpedia.org/property/sourceCountry&gt; ?l . ?uri &lt;http://www.w3.org/2000/01/rdf-schema#label&gt; ?l . ?uri rdf:type &lt;http://dbpedia.org/ontology/Country&gt; . }</SPARQL>
<NQS>[WH] = which, [R1] = does, [D] =  country, [R2] = start In, [I] = the  Ganges</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="100">
<Ques>When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?</Ques>
<SPARQL>empty</SPARQL>
<NQS>[WH] = When, [R1] = is, [D] = the  movie Worst Case, [R2] = , [I1_1] =  Scenario [CC]  [I1_3] =  going,
[CL2] = null,  [R3]= to be in, [I2_1] =  cinemas,
[CL3] = null,  [R4]= in, [I3_1] =  Netherlands</NQS>
<TYPE/>
</QALDquestions>
<QALDquestions id="101">
<Ques>Which German cities have more than 250000 inhabitants?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE { { ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/City&gt; . } UNION { ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Town&gt; . }  ?uri &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Germany&gt; .  ?uri &lt;http://dbpedia.org/ontology/populationTotal&gt; ?population .  FILTER ( ?population &gt; 250000 ) } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  German cities, [R2] = have more than, [I] =  250000 inhabitants</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="102">
<Ques>Who was John F. Kennedy's vice president?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE { &lt;http://dbpedia.org/resource/John_F._Kennedy&gt; &lt;http://dbpedia.org/ontology/vicePresident&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = was, [D] =  vice president, [R2] = of, [I] =  John F. Kennedy</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="103">
<Ques>Who is the mayor of Tel Aviv?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Tel_Aviv&gt; &lt;http://dbpedia.org/ontology/leaderName&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  mayor, [R2] = of, [I] =  Tel Aviv</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="104">
<Ques>How many students does the Free University in Amsterdam have?</Ques>
<SPARQL>SELECT DISTINCT ?num WHERE {  &lt;http://dbpedia.org/resource/VU_University_Amsterdam&gt; &lt;http://dbpedia.org/ontology/numberOfStudents&gt; ?num . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(students), [R2] = does , [I1_1] =  Free University,
[CL2] = null,  [R3]= in, [I2_1] =  Amsterdam,
[CL3] = null,  [R4]= have,</NQS>
<TYPE>COUNT:LIST</TYPE>
</QALDquestions>
<QALDquestions id="105">
<Ques>What is the second highest mountain on Earth?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Mountain&gt; .  ?uri &lt;http://dbpedia.org/ontology/elevation&gt; ?elevation . } ORDER BY DESC(?elevation) OFFSET 1 LIMIT 1 </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  second highest mountain, [R2] = on, [I] =  Earth</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="106">
<Ques>Give me all professional skateboarders from Sweden.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/occupation&gt; &lt;http://dbpedia.org/resource/Skateboarding&gt; . { ?uri &lt;http://dbpedia.org/ontology/birthPlace&gt; &lt;http://dbpedia.org/resource/Sweden&gt; . } UNION { ?uri &lt;http://dbpedia.org/ontology/birthPlace&gt; ?place .  ?place &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Sweden&gt; . } } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  professional skateboarders,
[CL2] = null,  [R3]= from, [I2_1] =  Sweden</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="107">
<Ques>When was Alberta admitted as province?</Ques>
<SPARQL>SELECT DISTINCT ?date WHERE {  &lt;http://dbpedia.org/resource/Alberta&gt; &lt;http://dbpedia.org/property/admittancedate&gt; ?date . } </SPARQL>
<NQS>[WH] = When, [R1] = was, [D] =  Alberta, [R2] = admitted as, [I] =  province</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="108">
<Ques>To which countries does the Himalayan mountain system extend?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Himalayas&gt; &lt;http://dbpedia.org/property/country&gt; ?uri . } </SPARQL>
<NQS>[WH] = which, [R1] = does, [D] =  countries, [R2] = , [I1_1] =  Himalayan mountain [CC]  [I1_3] =  system,
[CL2] = null,  [R3]= extend To,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="109">
<Ques>Give me a list of all bandleaders that play trumpet.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/occupation&gt; &lt;http://dbpedia.org/resource/Bandleader&gt; .  ?uri &lt;http://dbpedia.org/ontology/instrument&gt; &lt;http://dbpedia.org/resource/Trumpet&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  all bandleaders,
[CL2] = that, [R3]= play, [I2_1] =  trumpet</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="11">
<Ques>Which countries have more than ten caves?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Country&gt; .  ?cave &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Cave&gt; . { ?cave &lt;http://dbpedia.org/ontology/location&gt; ?uri . } UNION { ?cave &lt;http://dbpedia.org/ontology/location&gt; ?loc .  ?loc &lt;http://dbpedia.org/ontology/country&gt; ?uri . } } GROUP BY ?uri HAVING(COUNT(?cave) &gt; 10) </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  countries, [R2] = have more than, [I] =  ten caves</NQS>
<TYPE>LIST:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="110">
<Ques>What is the total amount of men and women serving in the FDNY?</Ques>
<SPARQL>SELECT DISTINCT ?num WHERE {  &lt;http://dbpedia.org/resource/New_York_City_Fire_Department&gt; &lt;http://dbpedia.org/property/employees&gt; ?num . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  total amount, [R2] = of, [I1_1] =  men [CC]  [I1_3] =  women [CC]  [I1_4] =  serving,
[CL2] = null,  [R3]= in, [I2_1] =  FDNY</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="200">
<Ques>Who produces Orangina?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/product&gt; &lt;http://dbpedia.org/resource/Orangina&gt; . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] =  DataProperty (Person), [R2] = produces, [I] =  Orangina</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="111">
<Ques>Who is the Formula 1 race driver with the most races?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/FormulaOneRacer&gt; .  ?uri &lt;http://dbpedia.org/ontology/races&gt; ?x . } ORDER BY DESC(?x) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  Formula, [R2] = , [I1_1] =  1 race [CC]  [I1_3] =  driver,
[CL2] = null,  [R3]= with, [I2_1] =  races</NQS>
<TYPE>LIST:RANK</TYPE>
</QALDquestions>
<QALDquestions id="112">
<Ques>Give me all world heritage sites designated within the past two years.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/WorldHeritageSite&gt; . { ?uri &lt;http://dbpedia.org/property/year&gt; '2013'^^xsd:integer . } UNION { ?uri &lt;http://dbpedia.org/property/year&gt; '2014'^^xsd:integer . } } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  world heritage [CC]  [I1_3] =  sites,
[CL2] = null,  [R3]= designated within, [I2_1] =  past two years</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="113">
<Ques>Who is the youngest player in the Premier League?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/team&gt; ?x .  ?x &lt;http://dbpedia.org/ontology/league&gt; &lt;http://dbpedia.org/resource/Premier_League&gt; .  ?uri &lt;http://dbpedia.org/ontology/birthDate&gt; ?y . } ORDER BY DESC(?y) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  youngest player, [R2] = in, [I] = the  Premier League</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="114">
<Ques>Give me all members of Prodigy.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/The_Prodigy&gt; &lt;http://dbpedia.org/ontology/bandMember&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = members of, [D] =  list, [R2] = is, [I1_1] =  Prodigy,
[CL2] = null,  [R3]= of,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="115">
<Ques>What is the longest river?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/River&gt; . { ?uri &lt;http://dbpedia.org/ontology/length&gt; ?l . } UNION { ?uri &lt;http://dbpedia.org/property/length&gt; ?l . } } ORDER BY DESC(?l) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  definition( longest river), [R2] = , [I] = the  longest river</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="116">
<Ques>Does Breaking Bad have more episodes than Game of Thrones?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Breaking_Bad&gt; &lt;http://dbpedia.org/ontology/numberOfEpisodes&gt; ?x .  &lt;http://dbpedia.org/resource/Game_of_Thrones&gt; &lt;http://dbpedia.org/ontology/numberOfEpisodes&gt; ?y .  FILTER (?x &gt; ?y) } </SPARQL>
<NQS>[Concepts] = [Breaking, Bad, more episodes, Game, Thrones], [Roles] = [have, than, of]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="117">
<Ques>Give me all cars that are produced in Germany.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Automobile&gt; . { ?uri &lt;http://dbpedia.org/ontology/assembly&gt; &lt;http://dbpedia.org/resource/Germany&gt; . } UNION { ?uri &lt;http://dbpedia.org/property/assembly&gt; &lt;http://dbpedia.org/resource/Germany&gt; . } UNION { { ?uri &lt;http://dbpedia.org/ontology/manufacturer&gt; ?x . }  UNION  { ?uri &lt;http://dbpedia.org/property/manufacturer&gt; ?x . }  { ?x &lt;http://dbpedia.org/ontology/locationCountry&gt; &lt;http://dbpedia.org/resource/Germany&gt; . }  UNION  { ?x &lt;http://dbpedia.org/ontology/location&gt; &lt;http://dbpedia.org/resource/Germany&gt; . } } } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  cars,
[CL2] = that, [R3]= are produced in, [I2_1] =  Germany</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="118">
<Ques>What were the main discoveries of the Mars rover Curiosity?</Ques>
<SPARQL>empty</SPARQL>
<NQS>[WH] = What, [R1] = were, [D] = the  main discoveries, [R2] = of, [I1_1] =  Mars rover [CC]  [I1_3] =  Curiosity</NQS>
<TYPE/>
</QALDquestions>
<QALDquestions id="119">
<Ques>Give me all people that were born in Vienna and died in Berlin.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/birthPlace&gt; &lt;http://dbpedia.org/resource/Vienna&gt; .  ?uri &lt;http://dbpedia.org/ontology/deathPlace&gt; &lt;http://dbpedia.org/resource/Berlin&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  people,
[CL2] = that, [R3]= were born in, [I2_1] =  Vienna,
[CL3] = null,  [R4]= died in, [I3_1] =  Berlin</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="12">
<Ques>Is proinsulin a protein?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Proinsulin&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Protein&gt; . } </SPARQL>
<NQS>[Concepts] = [proinsulin a protein], [Roles] = []</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="120">
<Ques>How tall is Michael Jordan?</Ques>
<SPARQL>SELECT DISTINCT ?num WHERE {  &lt;http://dbpedia.org/resource/Michael_Jordan&gt; &lt;http://dbpedia.org/ontology/height&gt; ?num . } </SPARQL>
<NQS>[WH] = How, [R1] = , [D] =  DataProperty(tall), [R2] = is , [I] =  Michael Jordan</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="121">
<Ques>What is the capital of Canada?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Canada&gt; &lt;http://dbpedia.org/ontology/capital&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  capital, [R2] = of, [I] =  Canada</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="122">
<Ques>Who is the governor of Wyoming?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Wyoming&gt; &lt;http://dbpedia.org/property/governor&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  governor, [R2] = of, [I] =  Wyoming</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="123">
<Ques>Do Prince Harry and Prince William have the same parents?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Prince_William,_Duke_of_Cambridge&gt; &lt;http://dbpedia.org/ontology/parent&gt; ?x .  &lt;http://dbpedia.org/resource/Prince_Harry&gt; &lt;http://dbpedia.org/ontology/parent&gt; ?x . } </SPARQL>
<NQS>[Concepts] = [Prince, Harry, Prince, William, the same parents], [Roles] = [have]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="124">
<Ques>Who was the father of Queen Elizabeth II?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Elizabeth_II&gt; &lt;http://dbpedia.org/property/father&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = was, [D] = the  far, [R2] = of, [I1_1] =  Queen [CC]  [I1_3] =  Elizabeth II</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="125">
<Ques>Which U.S. state has been admitted latest?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/StatesOfTheUnitedStates&gt; .  ?uri &lt;http://dbpedia.org/property/admittancedate&gt; ?x . } ORDER BY DESC(?x) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Which, [R1] = has been, [D] =  U.S. state, [R2] = admitted, [I] =  latest</NQS>
<TYPE>LIST:RANK</TYPE>
</QALDquestions>
<QALDquestions id="126">
<Ques>How many languages are spoken in Turkmenistan?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?x) as ?c) WHERE {  &lt;http://dbpedia.org/resource/Turkmenistan&gt; &lt;http://dbpedia.org/ontology/language&gt; ?x . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(languages), [R2] = are spoken in, [I] =  Turkmenistan</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="127">
<Ques>Butch Otter is the governor of which U.S. state?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/StatesOfTheUnitedStates&gt; .  ?uri &lt;http://dbpedia.org/property/governor&gt; &lt;http://dbpedia.org/resource/Butch_Otter&gt; . }</SPARQL>
<NQS>[WH] = which, [R1] = is, [D] =  U.S. state, [R2] = , [I1_1] =  Butch Otter [CC]  [I1_3] =  governor,
[CL2] = null,  [R3]= of,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="128">
<Ques>Give me all movies directed by Francis Ford Coppola.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Film&gt; .  ?uri &lt;http://dbpedia.org/ontology/director&gt; &lt;http://dbpedia.org/resource/Francis_Ford_Coppola&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  movies,
[CL2] = null,  [R3]= directed by, [I2_1] =  Francis Ford Coppola</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="129">
<Ques>Give me all actors starring in movies directed by William Shatner.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?x &lt;http://dbpedia.org/ontology/director&gt; &lt;http://dbpedia.org/resource/William_Shatner&gt; .  ?x &lt;http://dbpedia.org/ontology/starring&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  actors [CC]  [I1_3] =  starring,
[CL2] = null,  [R3]= in, [I2_1] =  movies,
[CL3] = null,  [R4]= directed by, [I3_1] =  William Shatner</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="13">
<Ques>Are tree frogs a type of amphibian?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Hylidae&gt; &lt;http://dbpedia.org/ontology/class&gt; &lt;http://dbpedia.org/resource/Amphibian&gt; . } </SPARQL>
<NQS>[Concepts] = [tree frogs, a type, amphibian], [Roles] = [of]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="130">
<Ques>What is the birth name of Angela Merkel?</Ques>
<SPARQL>SELECT DISTINCT ?string WHERE {  &lt;http://dbpedia.org/resource/Angela_Merkel&gt; &lt;http://dbpedia.org/ontology/birthName&gt; ?string . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  birth name, [R2] = of, [I] = a Angel Merkel</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="131">
<Ques>Give me all Methodist politicians.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Politician&gt; .  ?uri &lt;http://dbpedia.org/ontology/religion&gt; &lt;http://dbpedia.org/resource/Methodism&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I] =  Methodist politicians</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="132">
<Ques>How often did Jane Fonda marry?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  &lt;http://dbpedia.org/resource/Jane_Fonda&gt; &lt;http://dbpedia.org/ontology/spouse&gt; ?uri . } </SPARQL>
<NQS>[WH] = How, [R1] = , [D] = often DataProperty(), [R2] = did marry, [I] =  Jane Fonda</NQS>
<TYPE>LIST:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="133">
<Ques>Give me all Australian nonprofit organizations.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/type&gt; &lt;http://dbpedia.org/resource/Nonprofit_organization&gt; . { ?uri &lt;http://dbpedia.org/ontology/locationCountry&gt; &lt;http://dbpedia.org/resource/Australia&gt; . } UNION { ?uri &lt;http://dbpedia.org/ontology/location&gt; ?x .  ?x &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Australia&gt; . } } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I] =  Australian nonprofit organizations</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="134">
<Ques>In which military conflicts did Lawrence of Arabia participate?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/T._E._Lawrence&gt; &lt;http://dbpedia.org/ontology/battle&gt; ?uri . } </SPARQL>
<NQS>[WH] = which, [R1] = did, [D] =  military conflicts, [R2] = , [I1_1] =  Lawrence,
[CL2] = null,  [R3]= of, [I2_1] =  Arabia,
[CL3] = null,  [R4]= participate In,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="135">
<Ques>Who developed Minecraft?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Minecraft&gt; &lt;http://dbpedia.org/ontology/developer&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] =  DataProperty (Person), [R2] = developed, [I] =  Minecraft</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="136">
<Ques>What is the melting point of copper?</Ques>
<SPARQL>empty</SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  melting point, [R2] = of, [I] =  copper</NQS>
<TYPE/>
</QALDquestions>
<QALDquestions id="137">
<Ques>Give me all sister cities of Brno.</Ques>
<SPARQL>empty</SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  sister cities,
[CL2] = null,  [R3]= of, [I2_1] =  Brno</NQS>
<TYPE/>
</QALDquestions>
<QALDquestions id="138">
<Ques>How many inhabitants does Maribor have?</Ques>
<SPARQL>SELECT DISTINCT ?num WHERE {  &lt;http://dbpedia.org/resource/Maribor&gt; &lt;http://dbpedia.org/ontology/populationTotal&gt; ?num . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(inhabitants), [R2] = does have, [I] =  Maribor</NQS>
<TYPE>COUNT:LIST</TYPE>
</QALDquestions>
<QALDquestions id="139">
<Ques>Give me all companies in Munich.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Company&gt; . { ?uri &lt;http://dbpedia.org/ontology/location&gt; &lt;http://dbpedia.org/resource/Munich&gt; . } UNION { ?uri &lt;http://dbpedia.org/ontology/headquarter&gt; &lt;http://dbpedia.org/resource/Munich&gt; . } UNION { ?uri &lt;http://dbpedia.org/ontology/locationCity&gt; &lt;http://dbpedia.org/resource/Munich&gt; . } } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  companies,
[CL2] = null,  [R3]= in, [I2_1] =  Munich</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="14">
<Ques>How tall is Amazon Eve?</Ques>
<SPARQL>SELECT DISTINCT ?height WHERE {  &lt;http://dbpedia.org/resource/Amazon_Eve&gt; &lt;http://dbpedia.org/ontology/height&gt; ?height . } </SPARQL>
<NQS>[WH] = How, [R1] = , [D] =  DataProperty(tall), [R2] = is , [I] =  Amazon Eve</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="140">
<Ques>List all games by GMT.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/publisher&gt; &lt;http://dbpedia.org/resource/GMT_Games&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  games,
[CL2] = null,  [R3]= by, [I2_1] =  GMT</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="141">
<Ques>Who founded Intel?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Intel&gt; &lt;http://dbpedia.org/ontology/foundedBy&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] =  DataProperty (Person), [R2] = founded, [I] =  Intel</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="142">
<Ques>Who is the husband of Amanda Palmer?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Amanda_Palmer&gt; &lt;http://dbpedia.org/property/spouse&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  husband, [R2] = of, [I] = a Amnd Plmer</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="143">
<Ques>Give me all breeds of the German Shepherd dog.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/property/breed&gt; &lt;http://dbpedia.org/resource/German_Shepherd&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  breeds,
[CL2] = null,  [R3]= of, [I2_1] =  German Shepherd dog</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="144">
<Ques>Which cities does the Weser flow through?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Weser&gt; &lt;http://dbpedia.org/ontology/city&gt; ?uri . } </SPARQL>
<NQS>[WH] = Which, [R1] = does, [D] =  cities, [R2] = through, [I] = the  Weser flow</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="145">
<Ques>Which countries are connected by the Rhine?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Rhine&gt; &lt;http://dbpedia.org/property/country&gt; ?string .  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Country&gt; .  ?uri &lt;http://www.w3.org/2000/01/rdf-schema#label&gt; ?string . } </SPARQL>
<NQS>[WH] = Which, [R1] = are, [D] =  countries, [R2] = connected by, [I] = the  Rhine</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="146">
<Ques>Which professional surfers were born in Australia?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/occupation&gt; &lt;http://dbpedia.org/resource/Surfing&gt; . { ?uri &lt;http://dbpedia.org/ontology/birthPlace&gt; &lt;http://dbpedia.org/resource/Australia&gt; . } UNION { ?uri &lt;http://dbpedia.org/ontology/birthPlace&gt; ?x .  ?x &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Australia&gt; . } } </SPARQL>
<NQS>[WH] = Which, [R1] = were, [D] =  professional surfers, [R2] = born in, [I] =  Australia</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="147">
<Ques>What is the average temperature on Hawaii?</Ques>
<SPARQL>empty</SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  average temperature, [R2] = on, [I] =  Hawaii</NQS>
<TYPE/>
</QALDquestions>
<QALDquestions id="148">
<Ques>In which UK city are the headquarters of the MI6?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Secret_Intelligence_Service&gt; &lt;http://dbpedia.org/ontology/headquarter&gt; ?uri .  ?uri &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/United_Kingdom&gt; . } </SPARQL>
<NQS>[WH] = which, [R1] = are, [D] =  UK city, [R2] = , [I1_1] =  headquarters,
[CL2] = null,  [R3]= of, [I2_1] =  MI6,
[CL3] = null,  [R4]= In,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="149">
<Ques>Which weapons did Heckler &amp; Koch develop?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Weapon&gt; . ?uri &lt;http://dbpedia.org/property/designer&gt; &lt;http://dbpedia.org/resource/Heckler_&amp;_Koch&gt; .  }</SPARQL>
<NQS>[WH] = Which, [R1] = did, [D] =  weapons, [R2] = develop, [I] =  Heckler &amp; Koch</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="15">
<Ques>Who created Goofy?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Goofy&gt; &lt;http://dbpedia.org/ontology/creator&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] =  DataProperty (Person), [R2] = created, [I] =  Goofy</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="150">
<Ques>Was the Cuban Missile Crisis earlier than the Bay of Pigs Invasion?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Cuban_missile_crisis&gt; &lt;http://dbpedia.org/ontology/date&gt; ?x .  &lt;http://dbpedia.org/resource/Bay_of_Pigs_Invasion&gt; &lt;http://dbpedia.org/ontology/date&gt; ?y .  FILTER (?x &lt; ?y) } </SPARQL>
<NQS>[Concepts] = [the Cuban Missile Crisis, earlier, the Bay, Pigs Invasion], [Roles] = [than, of]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="151">
<Ques>Give me all islands that belong to Japan.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Island&gt; .  ?uri &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Japan&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  islands,
[CL2] = that, [R3]= belong to, [I2_1] =  Japan</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="152">
<Ques>Who invented the zipper?</Ques>
<SPARQL>empty</SPARQL>
<NQS>[WH] = Who, [R1] = , [D] =  DataProperty (Person), [R2] = invented, [I] = the  zipper</NQS>
<TYPE/>
</QALDquestions>
<QALDquestions id="153">
<Ques>What is the ruling party in Lisbon?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Lisbon&gt; &lt;http://dbpedia.org/property/leaderParty&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  ruling party, [R2] = in, [I] =  Lisbon</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="154">
<Ques>What are the nicknames of San Francisco?</Ques>
<SPARQL>SELECT DISTINCT ?string WHERE {  &lt;http://dbpedia.org/resource/San_Francisco&gt; &lt;http://dbpedia.org/property/nickname&gt; ?string . } </SPARQL>
<NQS>[WH] = What, [R1] = are, [D] = the  nicknames, [R2] = of, [I] =  San Francisco</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="155">
<Ques>Which Greek goddesses dwelt on Mount Olympus?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/GreekGoddesses&gt; .  ?uri &lt;http://dbpedia.org/property/abode&gt; &lt;http://dbpedia.org/resource/Mount_Olympus&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  Greek goddesses, [R2] = dwelt on, [I] =  Mount Olympus</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="156">
<Ques>When were the Hells Angels founded?</Ques>
<SPARQL>SELECT DISTINCT ?date WHERE {  &lt;http://dbpedia.org/resource/Hells_Angels&gt; &lt;http://dbpedia.org/property/founded&gt; ?date . } </SPARQL>
<NQS>[WH] = When, [R1] = were, [D] =  time( Hells Angels), [R2] = founded, [I] = the  Hells Angels</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="157">
<Ques>Give me all Apollo 14 astronauts.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/mission&gt; &lt;http://dbpedia.org/resource/Apollo_14&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  Apollo [CC]  [I1_3] =  14 astronauts</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="158">
<Ques>What is the time zone of Salt Lake City?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Salt_Lake_City&gt; &lt;http://dbpedia.org/property/timezone&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  time zone, [R2] = of, [I] =  Salt Lake City</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="159">
<Ques>Which U.S. states are in the same time zone as Utah?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Utah&gt; &lt;http://dbpedia.org/property/timezone&gt; ?x .  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/StatesOfTheUnitedStates&gt; .  ?uri &lt;http://dbpedia.org/property/timezone&gt; ?x .  FILTER (?uri != &lt;http://dbpedia.org/resource/Utah&gt;) } </SPARQL>
<NQS>[WH] = Which, [R1] = are, [D] =  U.S. states, [R2] = in, [I1_1] =  same time zone,
[CL2] = null,  [R3]= as, [I2_1] =  Utah</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="16">
<Ques>Give me the capitals of all countries in Africa.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?states &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/AfricanCountries&gt; .  ?states &lt;http://dbpedia.org/ontology/capital&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  capitals,
[CL2] = null,  [R3]= of, [I2_1] = all  all countries,
[CL3] = null,  [R4]= in, [I3_1] =  Africa</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="160">
<Ques>Give me a list of all lakes in Denmark.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  { ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Lake&gt; .  ?uri &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Denmark&gt; . }  UNION  { ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/LakesOfDenmark&gt; . } } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  all lakes,
[CL2] = null,  [R3]= in, [I2_1] =  Denmark</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="161">
<Ques>How many missions does the Soyuz programme have?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri &lt;http://dbpedia.org/property/programme&gt; &lt;http://dbpedia.org/resource/Soyuz_programme&gt; . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(missions), [R2] = does have, [I] = the  Soyuz programme</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="162">
<Ques>Did Socrates influence Aristotle?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Socrates&gt; &lt;http://dbpedia.org/ontology/influenced&gt; &lt;http://dbpedia.org/resource/Aristotle&gt; . } </SPARQL>
<NQS>[Concepts] = [Socrates, Aristotle], [Roles] = [influence]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="163">
<Ques>Give me all Danish movies.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Film&gt; .  ?uri &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Denmark&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I] =  Danish movies</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="164">
<Ques>Give me all launch pads operated by NASA.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/LaunchPad&gt; .  ?uri &lt;http://dbpedia.org/ontology/operator&gt; &lt;http://dbpedia.org/resource/NASA&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  launch pads,
[CL2] = null,  [R3]= operated by, [I2_1] =  NASA</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="165">
<Ques>Which instruments does Cat Stevens play?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Cat_Stevens&gt; &lt;http://dbpedia.org/ontology/instrument&gt; ?uri . } </SPARQL>
<NQS>[WH] = Which, [R1] = does, [D] =  instruments, [R2] = , [I1_1] =  Cat [CC]  [I1_3] =  Stevens,
[CL2] = null,  [R3]= play,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="166">
<Ques>Which ships were called after Benjamin Franklin?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/property/shipNamesake&gt; &lt;http://dbpedia.org/resource/Benjamin_Franklin&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = were, [D] =  ships, [R2] = called after, [I] =  Benjamin Franklin</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="167">
<Ques>Who are the parents of the wife of Juan Carlos I?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Juan_Carlos_I_of_Spain&gt; &lt;http://dbpedia.org/ontology/spouse&gt; ?x .  ?x &lt;http://dbpedia.org/ontology/parent&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = are, [D] = the  parents, [R2] = of, [I1_1] =  wife,
[CL2] = null,  [R3]= of, [I2_1] =  Juan Carlos,
[CL3] = null,  [R4]= I,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="168">
<Ques>How many employees does Google have?</Ques>
<SPARQL>SELECT DISTINCT ?num WHERE {  &lt;http://dbpedia.org/resource/Google&gt; &lt;http://dbpedia.org/ontology/numberOfEmployees&gt; ?num . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(employees), [R2] = does have, [I] =  Google</NQS>
<TYPE>COUNT:LIST</TYPE>
</QALDquestions>
<QALDquestions id="169">
<Ques>Did Tesla win a nobel prize in physics?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Nikola_Tesla&gt; &lt;http://dbpedia.org/ontology/award&gt; &lt;http://dbpedia.org/resource/Nobel_Prize_in_Physics&gt; . } </SPARQL>
<NQS>[Concepts] = [Tesla, a nobel prize, physics], [Roles] = [win, in]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="17">
<Ques>Give me all cities in New Jersey with more than 100000 inhabitants.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/City&gt; .  ?uri &lt;http://dbpedia.org/ontology/isPartOf&gt; &lt;http://dbpedia.org/resource/New_Jersey&gt; .  ?uri &lt;http://dbpedia.org/ontology/populationTotal&gt; ?inhabitants .  FILTER (?inhabitants &gt; 100000) . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  cities,
[CL2] = null,  [R3]= in, [I2_1] =  New Jersey,
[CL3] = null,  [R4]= with, [I3_1] =  more,
[CL4] = null,  [R5]= than, [I4_1] =  100000 inhabitants</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="170">
<Ques>Is Rita Wilson the wife of Tom Hanks?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Tom_Hanks&gt; &lt;http://dbpedia.org/ontology/spouse&gt; &lt;http://dbpedia.org/resource/Rita_Wilson&gt; . } </SPARQL>
<NQS>[Concepts] = [Rita Wilson the wife, Tom Hanks], [Roles] = [of]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="171">
<Ques>When was the Statue of Liberty built?</Ques>
<SPARQL>SELECT DISTINCT ?date WHERE {  &lt;http://dbpedia.org/resource/Statue_of_Liberty&gt; &lt;http://dbpedia.org/property/beginningDate&gt; ?date . } </SPARQL>
<NQS>[WH] = When, [R1] = was, [D] = the  Statue, [R2] = of, [I1_1] =  Liberty,
[CL2] = null,  [R3]= built,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="172">
<Ques>Where is Fort Knox located?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Fort_Knox&gt; &lt;http://dbpedia.org/property/location&gt; ?uri . }</SPARQL>
<NQS>[WH] = Where, [R1] = is, [D] =  Fort Knox, [R2] = , [I] =  located</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="173">
<Ques>How many children did Benjamin Franklin have?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  &lt;http://dbpedia.org/resource/Benjamin_Franklin&gt; &lt;http://dbpedia.org/ontology/child&gt; ?uri . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(children), [R2] = did have, [I] =  Benjamin Franklin</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="174">
<Ques>When did Michael Jackson die?</Ques>
<SPARQL>SELECT DISTINCT ?date WHERE {  &lt;http://dbpedia.org/resource/Michael_Jackson&gt; &lt;http://dbpedia.org/ontology/deathDate&gt; ?date . } </SPARQL>
<NQS>[WH] = When, [R1] = did, [D] =  time(Michael Jackson), [R2] = die, [I] =  Michael Jackson</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="175">
<Ques>Which Chess players died in the same place they were born in?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/ChessPlayer&gt; .  ?uri &lt;http://dbpedia.org/ontology/birthPlace&gt; ?x .  ?uri &lt;http://dbpedia.org/ontology/deathPlace&gt; ?y .  FILTER (?x = ?y) . } </SPARQL>
<NQS>[WH] = Which, [R1] = were, [D] =  Chess players, [R2] = died in, [I1_1] =  same place,
[CL2] = null,  [R3]= they,,
[CL3] = null,  [R4]= born in,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="176">
<Ques>List the children of Margaret Thatcher.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Margaret_Thatcher&gt; &lt;http://dbpedia.org/ontology/child&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  children,
[CL2] = null,  [R3]= of, [I2_1] =  Margaret Thatcher</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="177">
<Ques>Who was called Frank The Tank?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/property/nickname&gt; 'Frank The Tank'@en . } </SPARQL>
<NQS>[WH] = Who, [R1] = was, [D] = the Frank The, [R2] = called, [I] =  Tank</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="178">
<Ques>Was Margaret Thatcher a chemist?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Margaret_Thatcher&gt; &lt;http://dbpedia.org/ontology/profession&gt; &lt;http://dbpedia.org/resource/Chemist&gt; . } </SPARQL>
<NQS>[Concepts] = [Margaret Thatcher a chemist], [Roles] = []</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="179">
<Ques>Was Marc Chagall a jew?</Ques>
<SPARQL>ASK WHERE { &lt;http://dbpedia.org/resource/Marc_Chagall&gt; &lt;http://dbpedia.org/property/ethnicity&gt; 'Jewish'@en . } </SPARQL>
<NQS>[Concepts] = [Marc Chagall a jew], [Roles] = []</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="18">
<Ques>Which museum exhibits The Scream by Munch?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE { &lt;http://dbpedia.org/resource/The_Scream&gt; &lt;http://dbpedia.org/ontology/museum&gt; ?uri . } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  museum, [R2] = exhibits, [I1_1] =  The Scream,
[CL2] = null,  [R3]= by, [I2_1] =  Munch</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="180">
<Ques>Give me all books by William Goldman with more than 300 pages.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Book&gt; .  ?uri &lt;http://dbpedia.org/ontology/author&gt; &lt;http://dbpedia.org/resource/William_Goldman&gt; .  ?uri &lt;http://dbpedia.org/ontology/numberOfPages&gt; ?x .  FILTER (?x &gt; 300) } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  books,
[CL2] = null,  [R3]= by, [I2_1] =  William Goldman,
[CL3] = null,  [R4]= with, [I3_1] =  more,
[CL4] = null,  [R5]= than, [I4_1] =  300 pages</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="181">
<Ques>Which books by Kerouac were published by Viking Press?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Book&gt; .  ?uri &lt;http://dbpedia.org/ontology/publisher&gt; &lt;http://dbpedia.org/resource/Viking_Press&gt; .  ?uri &lt;http://dbpedia.org/ontology/author&gt; &lt;http://dbpedia.org/resource/Jack_Kerouac&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = were, [D] =  books, [R2] = by, [I1_1] =  Kerouac,
[CL2] = null,  [R3]= published by, [I2_1] =  Viking Press</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="182">
<Ques>Give me a list of all American inventions.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/AmericanInventions&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I] = all  American inventions</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="183">
<Ques>How high is the Mount Everest?</Ques>
<SPARQL>SELECT DISTINCT ?num WHERE {  &lt;http://dbpedia.org/resource/Mount_Everest&gt; &lt;http://dbpedia.org/ontology/elevation&gt; ?num. } </SPARQL>
<NQS>[WH] = How, [R1] = , [D] =  DataProperty(high), [R2] = is , [I] = the  Mount Everest</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="184">
<Ques>Who created Batman?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Batman&gt; &lt;http://dbpedia.org/ontology/creator&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] =  DataProperty (Person), [R2] = created, [I] =  Batman</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="185">
<Ques>How many people live in the capital of Australia?</Ques>
<SPARQL>SELECT DISTINCT ?num WHERE {  &lt;http://dbpedia.org/resource/Australia&gt; &lt;http://dbpedia.org/ontology/capital&gt; ?x .  ?x &lt;http://dbpedia.org/ontology/populationTotal&gt; ?num . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(people), [R2] =  live in, [I1_1] =  capital,
[CL2] = null,  [R3]= of, [I2_1] =  Australia</NQS>
<TYPE>COUNT:LIST</TYPE>
</QALDquestions>
<QALDquestions id="186">
<Ques>What is the largest city in Australia?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE { &lt;http://dbpedia.org/resource/Australia&gt; &lt;http://dbpedia.org/ontology/largestCity&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  largest city, [R2] = in, [I] =  Australia</NQS>
<TYPE>RANK:LIST</TYPE>
</QALDquestions>
<QALDquestions id="187">
<Ques>Who composed the music for Harold and Maude?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE { &lt;http://dbpedia.org/resource/Harold_and_Maude&gt; &lt;http://dbpedia.org/ontology/musicComposer&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] = the  music, [R2] = composed, [I1_1] =  Harold,
[CL2] = null,  [R3]= for, [I2_1] =  Maude</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="188">
<Ques>Which films starring Clint Eastwood did he direct himself?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/director&gt; &lt;http://dbpedia.org/resource/Clint_Eastwood&gt; .  ?uri &lt;http://dbpedia.org/ontology/starring&gt; &lt;http://dbpedia.org/resource/Clint_Eastwood&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = did, [D] =  films, [R2] = , [I1_1] =  starring [CC]  [I1_3] =  Clint Eastwood,
[CL2] = null,  [R3]= he direct himself,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="189">
<Ques>In which city was the former Dutch queen Juliana buried?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Juliana_of_the_Netherlands&gt; &lt;http://dbpedia.org/ontology/restingPlace&gt; ?uri.  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Settlement&gt; . } </SPARQL>
<NQS>[WH] = which, [R1] = was, [D] =  city, [R2] = , [I1_1] =  former Dutch queen [CC]  [I1_3] =  Juliana,
[CL2] = null,  [R3]= buried In,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="19">
<Ques>Is Egypts largest city also its capital?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Egypt&gt; &lt;http://dbpedia.org/ontology/largestCity&gt; ?large .  &lt;http://dbpedia.org/resource/Egypt&gt; &lt;http://dbpedia.org/ontology/capital&gt; ?capital .  FILTER (?large = ?capital) } </SPARQL>
<NQS/>
<TYPE>RANK:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="190">
<Ques>Where is the residence of the prime minister of Spain?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Prime_Minister_of_Spain&gt; &lt;http://dbpedia.org/property/residence&gt; ?uri . } </SPARQL>
<NQS>[WH] = Where, [R1] = is, [D] = the  residence, [R2] = of, [I1_1] =  prime minister,
[CL2] = null,  [R3]= of, [I2_1] =  Spain</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="191">
<Ques>Which U.S. state has the abbreviation MN?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/StatesOfTheUnitedStates&gt; .  ?uri &lt;http://dbpedia.org/property/postalabbreviation&gt; 'MN'@en . } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  U.S. state, [R2] = has, [I] = the  abbreviation MN</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="192">
<Ques>Show me all songs from Bruce Springsteen released between 1980 and 1990.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Song&gt; .  ?uri &lt;http://dbpedia.org/ontology/artist&gt; &lt;http://dbpedia.org/resource/Bruce_Springsteen&gt; .  ?uri &lt;http://dbpedia.org/ontology/releaseDate&gt; ?date .  FILTER (?date &gt;= '1980-01-01'^^xsd:date &amp;&amp; ?date &lt;= '1990-12-31'^^xsd:date) } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  all songs,
[CL2] = null,  [R3]= from, [I2_1] =  Bruce Springsteen,
[CL3] = null,  [R4]= released between, [I3_1] =  1980 and 1990</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="193">
<Ques>Which movies did Kurosawa direct?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Film&gt; .  ?uri &lt;http://dbpedia.org/ontology/director&gt; &lt;http://dbpedia.org/resource/Akira_Kurosawa&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = did, [D] =  movies, [R2] = direct, [I] =  Kurosawa</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="194">
<Ques>What is the founding year of the brewery that produces Pilsner Urquell?</Ques>
<SPARQL>SELECT DISTINCT ?num WHERE {  &lt;http://dbpedia.org/resource/Pilsner_Urquell&gt; &lt;http://dbpedia.org/property/brewery&gt; ?uri .  ?uri &lt;http://dbpedia.org/property/foundation&gt; ?num . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  founding, [R2] = of, [I1_1] =  year [CC]  [I1_3] =  brewery,
[CL2] = that, [R3]= produces, [I2_1] =  Pilsner Urquell</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="195">
<Ques>Who wrote the lyrics for the Polish national anthem?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Poland&gt; &lt;http://dbpedia.org/ontology/anthem&gt; ?x .  ?x &lt;http://dbpedia.org/property/author&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] = the  lyrics, [R2] = wrote, [I1_1] =  Polish national anthem,
[CL2] = null,  [R3]= for,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="196">
<Ques>Give me all B-sides of the Ramones.</Ques>
<SPARQL>SELECT DISTINCT ?string WHERE {  ?x &lt;http://dbpedia.org/ontology/musicalArtist&gt; &lt;http://dbpedia.org/resource/Ramones&gt; .  ?x &lt;http://dbpedia.org/ontology/bSide&gt; ?string . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  B-sides,
[CL2] = null,  [R3]= of, [I2_1] =  Ramones</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="197">
<Ques>Who painted The Storm on the Sea of Galilee?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/The_Storm_on_the_Sea_of_Galilee&gt; &lt;http://dbpedia.org/property/artist&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] = the The Storm, [R2] = painted, [I1_1] =  Sea,
[CL2] = null,  [R3]= on,,
[CL3] = null,  [R4]= of, [I3_1] =  Galilee</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="198">
<Ques>Which country does the creator of Miffy come from?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Miffy&gt; &lt;http://dbpedia.org/ontology/creator&gt; ?x .  ?x &lt;http://dbpedia.org/ontology/nationality&gt; ?uri . } </SPARQL>
<NQS>[WH] = Which, [R1] = does, [D] =  country, [R2] = , [I1_1] =  creator,
[CL2] = null,  [R3]= of, [I2_1] =  Miffy,
[CL3] = null,  [R4]= come from,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="199">
<Ques>For which label did Elvis record his first album?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?x &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Album&gt; .  ?x &lt;http://dbpedia.org/ontology/artist&gt; &lt;http://dbpedia.org/resource/Elvis_Presley&gt; .  ?x &lt;http://dbpedia.org/ontology/releaseDate&gt; ?y .  ?x &lt;http://dbpedia.org/ontology/recordLabel&gt; ?uri . } ORDER BY ASC(?y) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = which, [R1] = did, [D] =  label, [R2] = , [I1_1] =  Elvis,
[CL2] = null,  [R3]= record his, [I2_1] =  first album,
[CL3] = null,  [R4]= For,</NQS>
<TYPE>LIST:RANK</TYPE>
</QALDquestions>
<QALDquestions id="2">
<Ques>Give me the birthdays of all actors of the television show Charmed.</Ques>
<SPARQL>SELECT DISTINCT ?date WHERE {  &lt;http://dbpedia.org/resource/Charmed&gt; &lt;http://dbpedia.org/ontology/starring&gt; ?actor .  ?actor &lt;http://dbpedia.org/ontology/birthDate&gt; ?date . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  birthdays,
[CL2] = null,  [R3]= of, [I2_1] = all  all actors,
[CL3] = null,  [R4]= of, [I3_1] =  television show [CC]  [I3_2] =  Charmed</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="20">
<Ques>آی.بی.آم. چند کارمند دارد؟</Ques>
<SPARQL>SELECT DISTINCT ?number WHERE {  &lt;http://dbpedia.org/resource/IBM&gt; &lt;http://dbpedia.org/ontology/numberOfEmployees&gt; ?number . } </SPARQL>
<NQS/>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="21">
<Ques>Which states border Illinois?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Illinois&gt; &lt;http://dbpedia.org/property/borderingstates&gt; ?uri . } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  states, [R2] = border, [I] =  Illinois</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="22">
<Ques>In which country is the Limerick Lake?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Limerick_Lake&gt; &lt;http://dbpedia.org/ontology/country&gt; ?uri . } </SPARQL>
<NQS>[WH] = which, [R1] = is, [D] =  country, [R2] = In, [I] = the  Limerick Lake</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="23">
<Ques>Which television shows were created by John Cleese?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/TelevisionShow&gt; .  ?uri &lt;http://dbpedia.org/ontology/creator&gt; &lt;http://dbpedia.org/resource/John_Cleese&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = were, [D] =  television shows, [R2] = created by, [I] =  John Cleese</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="24">
<Ques>Which mountain is the highest after the Annapurna?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Annapurna&gt; &lt;http://dbpedia.org/ontology/elevation&gt; ?elevation .  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Mountain&gt; .  ?uri &lt;http://dbpedia.org/ontology/elevation&gt; ?otherelevation .  FILTER (?otherelevation &lt; ?elevation) . } ORDER BY DESC(?otherelevation) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Which, [R1] = is, [D] =  mountain, [R2] = , [I1_1] =  highest,
[CL2] = null,  [R3]= after, [I2_1] =  Annapurna</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="25">
<Ques>In which films directed by Garry Marshall was Julia Roberts starring?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Film&gt; .  ?uri &lt;http://dbpedia.org/ontology/starring&gt; &lt;http://dbpedia.org/resource/Julia_Roberts&gt; .  ?uri &lt;http://dbpedia.org/ontology/director&gt; &lt;http://dbpedia.org/resource/Garry_Marshall&gt; . } </SPARQL>
<NQS>[WH] = which, [R1] = was, [D] =  films, [R2] = directed by, [I1_1] =  Garry Marshall [CC]  [I1_3] =  Julia Roberts [CC]  [I1_4] =  starring,
[CL2] = null,  [R3]= In,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="26">
<Ques>Which bridges are of the same type as the Manhattan Bridge?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Bridge&gt; .  ?uri &lt;http://dbpedia.org/property/design&gt; ?design .  &lt;http://dbpedia.org/resource/Manhattan_Bridge&gt; &lt;http://dbpedia.org/property/design&gt; ?mdesign .  FILTER (?design = ?mdesign &amp;&amp; ?uri != &lt;http://dbpedia.org/resource/Manhattan_Bridge&gt;) .} </SPARQL>
<NQS>[WH] = Which, [R1] = are, [D] =  bridges, [R2] = of, [I1_1] =  same type,
[CL2] = null,  [R3]= as, [I2_1] =  Manhattan Bridge</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="27">
<Ques>Was U.S. president Jackson involved in a war?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Andrew_Jackson&gt; &lt;http://dbpedia.org/ontology/battle&gt; ?battle . } </SPARQL>
<NQS>[Concepts] = [U.S. president, Jackson, a war], [Roles] = [involved in]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="28">
<Ques>Give me all communist countries.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Country&gt; . ?uri &lt;http://dbpedia.org/property/ideology&gt; &lt;http://dbpedia.org/resource/Communism&gt; . }</SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I] =  communist countries</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="29">
<Ques>Which awards did Douglas Hofstadter win?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Douglas_Hofstadter&gt; &lt;http://dbpedia.org/ontology/award&gt; ?uri . } </SPARQL>
<NQS>[WH] = Which, [R1] = did, [D] =  awards, [R2] = win, [I] =  Douglas Hofstadter</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="3">
<Ques>Who is the daughter of Robert Kennedy married to?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Robert_F._Kennedy&gt; &lt;http://dbpedia.org/ontology/child&gt; ?child .  ?child &lt;http://dbpedia.org/ontology/spouse&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  daughter, [R2] = of, [I1_1] =  Robert Kennedy,
[CL2] = null,  [R3]= married to,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="30">
<Ques>Which U.S. state has the highest population density?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/StatesOfTheUnitedStates&gt; .  ?uri &lt;http://dbpedia.org/property/densityrank&gt; ?rank . } ORDER BY ASC(?rank) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  U.S. state, [R2] = has, [I] = the  highest population density</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="31">
<Ques>What is the currency of the Czech Republic?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE { &lt;http://dbpedia.org/resource/Czech_Republic&gt; &lt;http://dbpedia.org/ontology/currency&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  currency, [R2] = of, [I] = the  Czech Republic</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="32">
<Ques>Which countries adopted the Euro?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Country&gt; .  { ?uri &lt;http://dbpedia.org/ontology/currency&gt; &lt;http://dbpedia.org/resource/Euro&gt; . }  UNION  { ?uri &lt;http://dbpedia.org/property/currencyCode&gt; 'EUR'@en . } } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  countries, [R2] = adopted, [I] = the  Euro</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="33">
<Ques>What is the area code of Berlin?</Ques>
<SPARQL>SELECT DISTINCT ?string WHERE {  &lt;http://dbpedia.org/resource/Berlin&gt; &lt;http://dbpedia.org/ontology/areaCode&gt; ?string . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  area code, [R2] = of, [I] =  Berlin</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="34">
<Ques>Which countries have more than two official languages?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Country&gt; .  ?uri &lt;http://dbpedia.org/ontology/officialLanguage&gt; ?language . } GROUP BY ?uri HAVING (COUNT(?language) &gt; 2) </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  countries, [R2] = have more than, [I] =  two official languages</NQS>
<TYPE>LIST:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="35">
<Ques>Who is the owner of Rolls-Royce?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Rolls-Royce_Motors&gt; &lt;http://dbpedia.org/ontology/owner&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  owner, [R2] = of, [I] =  Rolls-Royce</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="36">
<Ques>Through which countries does the Yenisei river flow?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Yenisei_River&gt; &lt;http://dbpedia.org/ontology/country&gt; ?uri . } </SPARQL>
<NQS>[WH] = which, [R1] = does, [D] =  countries, [R2] = , [I1_1] =  Yenisei river [CC]  [I1_3] =  flow,
[CL2] = null,  [R3]= Through,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="37">
<Ques>When did Latvia join the EU?</Ques>
<SPARQL>SELECT DISTINCT ?date WHERE {  &lt;http://dbpedia.org/resource/Latvia&gt; &lt;http://dbpedia.org/property/accessioneudate&gt; ?date . } </SPARQL>
<NQS>[WH] = When, [R1] = did, [D] =  Latvia, [R2] = join, [I] = the  EU</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="38">
<Ques>Which politicians were married to a German?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Politician&gt; .  ?uri &lt;http://dbpedia.org/ontology/spouse&gt; ?spouse . { ?spouse &lt;http://dbpedia.org/ontology/birthPlace&gt; &lt;http://dbpedia.org/resource/Germany&gt; . } UNION { ?spouse &lt;http://dbpedia.org/ontology/birthPlace&gt; ?p .  ?p &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Germany&gt; . } } </SPARQL>
<NQS>[WH] = Which, [R1] = were, [D] =  politicians, [R2] = married to, [I] = a  Germn</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="39">
<Ques>When was the Battle of Gettysburg?</Ques>
<SPARQL>SELECT DISTINCT ?date WHERE {  &lt;http://dbpedia.org/resource/Battle_of_Gettysburg&gt; &lt;http://dbpedia.org/ontology/date&gt; ?date . } </SPARQL>
<NQS>[WH] = When, [R1] = was, [D] = the  Battle, [R2] = of, [I] =  Gettysburg</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="4">
<Ques>Which river does the Brooklyn Bridge cross?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Brooklyn_Bridge&gt; &lt;http://dbpedia.org/ontology/crosses&gt; ?uri . } </SPARQL>
<NQS>[WH] = Which, [R1] = does, [D] =  river, [R2] = cross, [I] = the  Brooklyn Bridge</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="40">
<Ques>What is the highest mountain in Australia?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Mountain&gt; .  ?uri &lt;http://dbpedia.org/ontology/locatedInArea&gt; &lt;http://dbpedia.org/resource/Australia&gt; .  ?uri &lt;http://dbpedia.org/ontology/elevation&gt; ?elevation . } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  highest mountain, [R2] = in, [I] =  Australia</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="41">
<Ques>Give me all soccer clubs in Spain.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/SoccerClub&gt; .  { ?uri &lt;http://dbpedia.org/ontology/ground&gt; &lt;http://dbpedia.org/resource/Spain&gt; . }  UNION  { ?uri &lt;http://dbpedia.org/property/ground&gt; ?ground .  FILTER (regex(?ground,'Spain')) } } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  soccer clubs,
[CL2] = null,  [R3]= in, [I2_1] =  Spain</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="42">
<Ques>What is the official language of Suriname?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Suriname&gt; &lt;http://dbpedia.org/ontology/officialLanguage&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  official language, [R2] = of, [I] =  Suriname</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="43">
<Ques>Who is the mayor of Tel Aviv?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Tel_Aviv&gt; &lt;http://dbpedia.org/ontology/leaderName&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  mayor, [R2] = of, [I] =  Tel Aviv</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="44">
<Ques>Who designed the Brooklyn Bridge?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Brooklyn_Bridge&gt; &lt;http://dbpedia.org/ontology/architect&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] =  DataProperty (Person), [R2] = designed, [I] = the  Brooklyn Bridge</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="45">
<Ques>Which telecommunications organizations are located in Belgium?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Organisation&gt; . { ?uri &lt;http://dbpedia.org/ontology/industry&gt; &lt;http://dbpedia.org/resource/Telecommunication&gt; . } UNION { ?uri &lt;http://dbpedia.org/property/industry&gt; ?industry .  FILTER (regex(?industry,'Telecommunications')) . } { ?uri &lt;http://dbpedia.org/ontology/location&gt; &lt;http://dbpedia.org/resource/Belgium&gt; . } UNION { ?uri &lt;http://dbpedia.org/property/locationCountry&gt; 'Belgium'@en . } } </SPARQL>
<NQS>[WH] = Which, [R1] = are, [D] =  telecommunications organizations, [R2] = , [I1_1] =  located,
[CL2] = null,  [R3]= in, [I2_1] =  Belgium</NQS>
<TYPE>LIST:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="46">
<Ques>Is Frank Herbert still alive?</Ques>
<SPARQL>ASK WHERE {  OPTIONAL { &lt;http://dbpedia.org/resource/Frank_Herbert&gt; &lt;http://dbpedia.org/ontology/deathDate&gt; ?date . }  FILTER (!BOUND(?date)) } </SPARQL>
<NQS>[Concepts] = [Frank Herbert, still alive], [Roles] = []</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="47">
<Ques>What is the highest place of the Urals?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Ural_Mountains&gt; &lt;http://dbpedia.org/property/highest&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  highest place, [R2] = of, [I] = the  Urals</NQS>
<TYPE>RANK:LIST</TYPE>
</QALDquestions>
<QALDquestions id="48">
<Ques>Who is the editor of Forbes?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Forbes&gt; &lt;http://dbpedia.org/ontology/editor&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  editor, [R2] = of, [I] =  Forbes</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="49">
<Ques>Give me all companies in the advertising industry.</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Company&gt; . { ?uri &lt;http://dbpedia.org/ontology/industry&gt; &lt;http://dbpedia.org/resource/Advertising&gt; } UNION { ?uri &lt;http://dbpedia.org/ontology/industry&gt; ?industry .  FILTER regex(?industry,'advertising','i') . } } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  companies,
[CL2] = null,  [R3]= in, [I2_1] =  advertising industry</NQS>
<TYPE>LIST:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="5">
<Ques>How many countries are there in Europe?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/EuropeanCountries&gt; . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(countries), [R2] = are in, [I] =  Europe</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="50">
<Ques>What did Bruce Carver die from?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Bruce_Carver&gt; &lt;http://dbpedia.org/ontology/deathCause&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = did, [D] =  definition(Bruce Carver), [R2] = die from, [I] =  Bruce Carver</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="51">
<Ques>Give me all libraries established earlier than 1400.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Library&gt; .  ?uri &lt;http://dbpedia.org/property/established&gt; ?year .  FILTER (?year &lt; 1400) } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  libraries,
[CL2] = null,  [R3]= established earlier than, [I2_1] =  1400</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="52">
<Ques>Which presidents were born in 1945?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/President&gt; .  ?uri &lt;http://dbpedia.org/ontology/birthDate&gt; ?date .  FILTER regex(?date, '^1945') . } </SPARQL>
<NQS>[WH] = Which, [R1] = were, [D] =  presidents, [R2] = born in, [I] =  1945</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="53">
<Ques>Give me all federal chancellors of Germany.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Person&gt; .  { ?uri &lt;http://dbpedia.org/ontology/office&gt; 'Chancellor of Germany' . }  UNION  { ?uri &lt;http://dbpedia.org/property/office&gt; &lt;http://dbpedia.org/resource/Chancellor_of_Germany&gt; . } } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  federal chancellors,
[CL2] = null,  [R3]= of, [I2_1] =  Germany</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="54">
<Ques>Who was the wife of U.S. president Lincoln?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Abraham_Lincoln&gt; &lt;http://dbpedia.org/ontology/spouse&gt; ?uri. } </SPARQL>
<NQS>[WH] = Who, [R1] = was, [D] = the  wife, [R2] = of, [I1_1] =  U.S. president [CC]  [I1_3] =  Lincoln</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="55">
<Ques>Who developed the video game World of Warcraft?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/World_of_Warcraft&gt; &lt;http://dbpedia.org/ontology/developer&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] = the  video game, [R2] = developed, [I1_1] =  World,
[CL2] = null,  [R3]= of, [I2_1] =  Warcraft</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="56">
<Ques>What is the official website of Tom Cruise?</Ques>
<SPARQL>SELECT DISTINCT ?string WHERE {  &lt;http://dbpedia.org/resource/Tom_Cruise&gt; &lt;http://dbpedia.org/property/website&gt; ?string . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  official website, [R2] = of, [I] =  Tom Cruise</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="57">
<Ques>List all episodes of the first season of the HBO television series The Sopranos.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/series&gt; &lt;http://dbpedia.org/resource/The_Sopranos&gt; .  ?uri &lt;http://dbpedia.org/ontology/seasonNumber&gt; 1 . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  episodes,
[CL2] = null,  [R3]= of, [I2_1] =  first season,
[CL3] = null,  [R4]= of, [I3_1] =  HBO television [CC]  [I3_2] = The  series The Sopranos</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="58">
<Ques>Who produced the most films?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?film &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Film&gt; .  ?film &lt;http://dbpedia.org/ontology/producer&gt; ?uri . } ORDER BY DESC(COUNT(?film)) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] =  DataProperty (Person), [R2] = produced, [I] =  films</NQS>
<TYPE>LIST:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="59">
<Ques>Give me all people with first name Jimmy.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; foaf:Person .  ?uri foaf:givenName 'Jimmy'@en . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  people,
[CL2] = null,  [R3]= with, [I2_1] =  first name [CC]  [I2_2] =  Jimmy</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="6">
<Ques>In which city did John F. Kennedy die?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/John_F._Kennedy&gt; &lt;http://dbpedia.org/ontology/deathPlace&gt; ?uri .  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/City&gt; . } </SPARQL>
<NQS>[WH] = which, [R1] = did, [D] =  city, [R2] = die In, [I] =  John F. Kennedy</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="60">
<Ques>Is there a video game called Battle Chess?</Ques>
<SPARQL>ASK WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/VideoGame&gt; .  ?uri &lt;http://www.w3.org/2000/01/rdf-schema#label&gt; 'Battle Chess'@en . } </SPARQL>
<NQS>[Concepts] = [a video game, Battle Chess], [Roles] = [called]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="61">
<Ques>Which mountains are higher than the Nanga Parbat?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Nanga_Parbat&gt; &lt;http://dbpedia.org/ontology/elevation&gt; ?elevation .  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Mountain&gt; . { ?uri &lt;http://dbpedia.org/ontology/elevation&gt; ?otherelevation . } UNION { ?uri &lt;http://dbpedia.org/property/elevationM&gt; ?otherelevation . }  FILTER (?otherelevation &gt; ?elevation) . } </SPARQL>
<NQS>[WH] = Which, [R1] = are, [D] =  mountains, [R2] = , [I1_1] =  higher,
[CL2] = null,  [R3]= than, [I2_1] =  Nanga Parbat</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="62">
<Ques>Who created Wikipedia?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Wikipedia&gt; &lt;http://dbpedia.org/ontology/author&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] =  DataProperty (Person), [R2] = created, [I] =  Wikipedia</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="63">
<Ques>Give me all actors starring in Last Action Hero.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Last_Action_Hero&gt; &lt;http://dbpedia.org/ontology/starring&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  actors [CC]  [I1_3] =  starring,
[CL2] = null,  [R3]= in, [I2_1] =  Last Action Hero</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="64">
<Ques>Which software has been developed by organizations founded in California?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Software&gt; .  ?company &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Company&gt; .  ?uri &lt;http://dbpedia.org/ontology/developer&gt; ?company .  ?company &lt;http://dbpedia.org/ontology/foundationPlace&gt; &lt;http://dbpedia.org/resource/California&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = has been, [D] =  software, [R2] = developed by, [I1_1] =  organizations,
[CL2] = null,  [R3]= founded in, [I2_1] =  California</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="65">
<Ques>Which companies work in the aerospace industry as well as in medicine?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Company&gt; .  ?uri &lt;http://dbpedia.org/ontology/industry&gt; &lt;http://dbpedia.org/resource/Aerospace&gt; .  ?uri &lt;http://dbpedia.org/ontology/industry&gt; &lt;http://dbpedia.org/resource/Medicine&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  companies, [R2] = work in, [I1_1] =  aerospace industry [CC]  [I1_3] =  as well as in medicine</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="66">
<Ques>Is Christian Bale starring in Velvet Goldmine?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Velvet_Goldmine&gt; &lt;http://dbpedia.org/ontology/starring&gt; &lt;http://dbpedia.org/resource/Christian_Bale&gt; . } </SPARQL>
<NQS>[Concepts] = [Christian Bale, starring, Velvet Goldmine], [Roles] = [in]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="67">
<Ques>Give me the websites of companies with more than 500000 employees.</Ques>
<SPARQL>SELECT DISTINCT ?string WHERE {  ?c &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Company&gt; . { ?c &lt;http://dbpedia.org/ontology/numberOfEmployees&gt; ?employees . } UNION { ?c &lt;http://dbpedia.org/property/numEmployees&gt; ?employees . }  FILTER( xsd:integer(?employees) &gt; 500000 ) .  ?c &lt;http://dbpedia.org/property/homepage&gt; ?string . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  websites,
[CL2] = null,  [R3]= of, [I2_1] =  companies,
[CL3] = null,  [R4]= with, [I3_1] =  more,
[CL4] = null,  [R5]= than, [I4_1] =  500000 employees</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="68">
<Ques>Which actors were born in Germany?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Actor&gt; . { ?uri &lt;http://dbpedia.org/ontology/birthPlace&gt; &lt;http://dbpedia.org/resource/Germany&gt; . } UNION { ?uri &lt;http://dbpedia.org/ontology/birthPlace&gt; ?place .  ?place &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Germany&gt; . } } </SPARQL>
<NQS>[WH] = Which, [R1] = were, [D] =  actors, [R2] = born in, [I] =  Germany</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="69">
<Ques>Which caves have more than 3 entrances?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Cave&gt; .  ?uri &lt;http://dbpedia.org/property/entranceCount&gt; ?entrance .  FILTER (?entrance &gt; 3) . } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  caves, [R2] = have more than, [I] =  3 entrances</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="7">
<Ques>Was the wife of president Lincoln called Mary?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Abraham_Lincoln&gt; &lt;http://dbpedia.org/ontology/spouse&gt; ?spouse .  ?spouse &lt;http://www.w3.org/2000/01/rdf-schema#label&gt; ?name .  FILTER(regex(?name,'Mary')) } </SPARQL>
<NQS>[Concepts] = [the wife, president, Lincoln, Mary], [Roles] = [of, called]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="70">
<Ques>Give me all films produced by Hal Roach.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Film&gt; .  ?uri &lt;http://dbpedia.org/ontology/producer&gt; &lt;http://dbpedia.org/resource/Hal_Roach&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  films,
[CL2] = null,  [R3]= produced by, [I2_1] =  Hal Roach</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="71">
<Ques>Give me all video games published by Mean Hamster Software.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE { ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/VideoGame&gt; . ?uri &lt;http://dbpedia.org/ontology/publisher&gt; &lt;http://dbpedia.org/resource/Mean_Hamster_Software&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  video games,
[CL2] = null,  [R3]= published by, [I2_1] =  Mean Hamster [CC]  [I2_2] =  Software</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="72">
<Ques>Which languages are spoken in Estonia?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/spokenIn&gt; &lt;http://dbpedia.org/resource/Estonia&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = are, [D] =  languages, [R2] = spoken in, [I] =  Estonia</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="73">
<Ques>How many Aldi stores are there?</Ques>
<SPARQL>SELECT DISTINCT ?number WHERE {  &lt;http://dbpedia.org/resource/Aldi&gt; &lt;http://dbpedia.org/ontology/numberOfLocations&gt; ?number . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(), [R2] = are , [I] =  Aldi stores</NQS>
<TYPE>COUNT:LIST</TYPE>
</QALDquestions>
<QALDquestions id="74">
<Ques>Which capitals in Europe were host cities of the summer olympic games?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/CapitalsInEurope&gt; .  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/HostCitiesOfTheSummerOlympicGames&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = were, [D] =  capitals, [R2] = in, [I1_1] =  Europe [CC]  [I1_3] =  host cities,
[CL2] = null,  [R3]= of, [I2_1] =  summer olympic games</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="75">
<Ques>Who was the 16th president of the United States?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/office&gt; 'President of the United States'^^&lt;http://www.w3.org/2001/XMLSchema#string&gt; .  ?uri &lt;http://dbpedia.org/ontology/orderInOffice&gt; '16th'^^&lt;http://www.w3.org/2001/XMLSchema#string&gt; . } </SPARQL>
<NQS>[WH] = Who, [R1] = was, [D] = the  16th president, [R2] = of, [I] = the  United States</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="76">
<Ques>How many films did Hal Roach produce?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri &lt;http://dbpedia.org/ontology/producer&gt; &lt;http://dbpedia.org/resource/Hal_Roach&gt; . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(films), [R2] = did produce, [I] =  Hal Roach</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="77">
<Ques>Which music albums contain the song Last Christmas?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?single &lt;http://dbpedia.org/ontology/album&gt; ?uri .  ?single &lt;http://www.w3.org/2000/01/rdf-schema#label&gt; 'Last Christmas'@en . } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  music albums, [R2] = contain, [I1_1] =  song [CC]  [I1_3] =  Last Christmas</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="78">
<Ques>Give me all books written by Danielle Steel.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Book&gt; .  ?uri &lt;http://dbpedia.org/ontology/author&gt; &lt;http://dbpedia.org/resource/Danielle_Steel&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  books,
[CL2] = null,  [R3]= written by, [I2_1] =  Danielle Steel</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="79">
<Ques>Which airports are located in California, USA?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Airport&gt; . { ?uri &lt;http://dbpedia.org/ontology/location&gt; &lt;http://dbpedia.org/resource/California&gt; . } UNION { ?uri &lt;http://dbpedia.org/ontology/city&gt; &lt;http://dbpedia.org/resource/California&gt; . } UNION { ?uri &lt;http://dbpedia.org/ontology/city&gt; ?city .  ?city &lt;http://dbpedia.org/ontology/isPartOf&gt; &lt;http://dbpedia.org/resource/California&gt; . } UNION { ?uri &lt;http://dbpedia.org/ontology/operator&gt; &lt;http://dbpedia.org/resource/California&gt; . } } </SPARQL>
<NQS>[WH] = Which, [R1] = are, [D] =  airports, [R2] = , [I1_1] =  located,
[CL2] = null,  [R3]= in, [I2_1] =  California [CC]  [I2_2] =  USA</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="8">
<Ques>Which states of Germany are governed by the Social Democratic Party?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/StatesOfGermany&gt; .  { ?uri &lt;http://dbpedia.org/ontology/leaderParty&gt; &lt;http://dbpedia.org/resource/Social_Democratic_Party_of_Germany&gt; . } UNION  { ?uri &lt;http://dbpedia.org/property/rulingParty&gt; 'SPD'@en . } } </SPARQL>
<NQS>[WH] = Which, [R1] = are, [D] =  states, [R2] = of, [I1_1] =  Germany,
[CL2] = null,  [R3]= governed by, [I2_1] =  Social Democratic Party</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="80">
<Ques>Give me all Canadian Grunge record labels.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/RecordLabel&gt; .  ?uri &lt;http://dbpedia.org/ontology/genre&gt; &lt;http://dbpedia.org/resource/Grunge&gt; .  ?uri &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Canada&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  Canadian Grunge record [CC]  [I1_3] =  labels</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="81">
<Ques>Which country has the most official languages?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Country&gt; .  ?uri &lt;http://dbpedia.org/property/officialLanguages&gt; ?language . } ORDER BY DESC(COUNT(?language)) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  country, [R2] = has, [I] =  official languages</NQS>
<TYPE>LIST:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="82">
<Ques>In which programming language is GIMP written?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/GIMP&gt; &lt;http://dbpedia.org/ontology/programmingLanguage&gt; ?uri . } </SPARQL>
<NQS>[WH] = which, [R1] = is, [D] =  programming language, [R2] = written In, [I] =  GIMP</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="83">
<Ques>Who produced films starring Natalie Portman?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?film &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Film&gt; .  ?film &lt;http://dbpedia.org/ontology/starring&gt; &lt;http://dbpedia.org/resource/Natalie_Portman&gt; .  ?film &lt;http://dbpedia.org/ontology/producer&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] =  films, [R2] = produced, [I1_1] =  starring [CC]  [I1_3] =  Natalie Portman</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="84">
<Ques>Give me all movies with Tom Cruise.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Film&gt; .  ?uri &lt;http://dbpedia.org/ontology/starring&gt; &lt;http://dbpedia.org/resource/Tom_Cruise&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  movies,
[CL2] = null,  [R3]= with, [I2_1] =  Tom Cruise</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="85">
<Ques>In which films did Julia Roberts as well as Richard Gere play?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Film&gt; .  ?uri &lt;http://dbpedia.org/ontology/starring&gt; &lt;http://dbpedia.org/resource/Julia_Roberts&gt; .  ?uri &lt;http://dbpedia.org/ontology/starring&gt; &lt;http://dbpedia.org/resource/Richard_Gere&gt; . } </SPARQL>
<NQS>[WH] = which, [R1] = did, [D] =  films, [R2] = , [I1_1] =  Julia Roberts [CC]  [I1_3] =  as well as Richard Gere,
[CL2] = null,  [R3]= play In,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="86">
<Ques>Give me all female given names.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/GivenName&gt; .  ?uri &lt;http://dbpedia.org/ontology/gender&gt; &lt;http://dbpedia.org/resource/Female&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I] =  female given names</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="87">
<Ques>Who wrote the book The Pillars of the Earth?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/The_Pillars_of_the_Earth&gt; &lt;http://dbpedia.org/ontology/author&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] = the  book The Pillars, [R2] = wrote, [I1_1] =  Earth,
[CL2] = null,  [R3]= of,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="88">
<Ques>How many films did Leonardo DiCaprio star in?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Film&gt; .  ?uri &lt;http://dbpedia.org/ontology/starring&gt; &lt;http://dbpedia.org/resource/Leonardo_DiCaprio&gt; . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(films), [R2] = did , [I1_1] =  Leonardo DiCaprio [CC]  [I1_3] =  star,
[CL2] = null,  [R3]= in,</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="89">
<Ques>Give me all soccer clubs in the Premier League.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/SoccerClub&gt; .  ?uri &lt;http://dbpedia.org/ontology/league&gt; &lt;http://dbpedia.org/resource/Premier_League&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  soccer clubs,
[CL2] = null,  [R3]= in, [I2_1] =  Premier League</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="9">
<Ques>In which U.S. state is Mount McKinley located?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/StatesOfTheUnitedStates&gt; .  &lt;http://dbpedia.org/resource/Mount_McKinley&gt; &lt;http://dbpedia.org/ontology/locatedInArea&gt; ?uri . } </SPARQL>
<NQS>[WH] = which, [R1] = is, [D] =  U.S. state, [R2] = , [I1_1] =  Mount McKinley [CC]  [I1_3] =  located,
[CL2] = null,  [R3]= In,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="90">
<Ques>When was Jack Wolfskin founded?</Ques>
<SPARQL>SELECT DISTINCT ?year WHERE {  &lt;http://dbpedia.org/resource/Jack_Wolfskin&gt; &lt;http://dbpedia.org/ontology/foundingYear&gt; ?year . } </SPARQL>
<NQS>[WH] = When, [R1] = was, [D] =  time(Jack Wolfskin), [R2] = founded, [I] =  Jack Wolfskin</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="91">
<Ques>Which organizations were founded in 1930?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Organisation&gt; . { ?uri &lt;http://dbpedia.org/ontology/formationYear&gt; ?date . } UNION { ?uri &lt;http://dbpedia.org/ontology/foundingYear&gt; ?date. } FILTER regex(?date,'^1930') . } </SPARQL>
<NQS>[WH] = Which, [R1] = were, [D] =  organizations, [R2] = founded in, [I] =  1930</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="92">
<Ques>What is the highest mountain?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Mountain&gt; .  ?uri &lt;http://dbpedia.org/ontology/elevation&gt; ?elevation . } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  definition( highest mountain), [R2] = , [I] = the  highest mountain</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="93">
<Ques>Was Natalie Portman born in the United States?</Ques>
<SPARQL>ASK WHERE {  { &lt;http://dbpedia.org/resource/Natalie_Portman&gt; &lt;http://dbpedia.org/ontology/birthPlace&gt; &lt;http://dbpedia.org/resource/United_States&gt; . }  UNION  { &lt;http://dbpedia.org/resource/Natalie_Portman&gt; &lt;http://dbpedia.org/ontology/birthPlace&gt; ?city .  ?city &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/United_States&gt; . } } </SPARQL>
<NQS>[Concepts] = [Natalie Portman, the United States], [Roles] = [born in]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="94">
<Ques>Which budget did the first movie of Zdenek Sverak have?</Ques>
<SPARQL>empty</SPARQL>
<NQS>[WH] = Which, [R1] = did, [D] =  budget, [R2] = , [I1_1] =  first movie,
[CL2] = null,  [R3]= of, [I2_1] =  Zdenek Sverak,
[CL3] = null,  [R4]= have,</NQS>
<TYPE/>
</QALDquestions>
<QALDquestions id="95">
<Ques>How many big fires struck Paris during the Middle Ages?</Ques>
<SPARQL>empty</SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(big fires), [R2] =  struck, [I1_1] =  Paris,
[CL2] = null,  [R3]= during, [I2_1] =  Middle Ages</NQS>
<TYPE/>
</QALDquestions>
<QALDquestions id="96">
<Ques>Is Pamela Anderson a vegan?</Ques>
<SPARQL>empty</SPARQL>
<NQS>[Concepts] = [Pamela Anderson a vegan], [Roles] = []</NQS>
<TYPE/>
</QALDquestions>
<QALDquestions id="97">
<Ques>How often was Michael Jordan divorced?</Ques>
<SPARQL>empty</SPARQL>
<NQS>[WH] = How, [R1] = , [D] = often DataProperty(), [R2] = was divorced, [I] =  Michael Jordan</NQS>
<TYPE/>
</QALDquestions>
<QALDquestions id="98">
<Ques>What is the most beautiful painting?</Ques>
<SPARQL>empty</SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  definition(beautiful painting), [R2] = , [I] =  beautiful painting</NQS>
<TYPE/>
</QALDquestions>
<QALDquestions id="99">
<Ques>Give me all animal species that live in the Amazon rainforest.</Ques>
<SPARQL>empty</SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  animal species,
[CL2] = that, [R3]= live in, [I2_1] =  Amazon rainforest</NQS>
<TYPE/>
</QALDquestions>
<QALDquestions id="231">
<Ques>How many inhabitants does the largest city in Canada have?</Ques>
<SPARQL>SELECT DISTINCT ?num WHERE {  &lt;http://dbpedia.org/resource/Canada&gt; &lt;http://dbpedia.org/ontology/largestCity&gt; ?city .  ?city &lt;http://dbpedia.org/ontology/populationTotal&gt; ?num . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(inhabitants), [R2] = does , [I1_1] =  largest city,
[CL2] = null,  [R3]= in, [I2_1] =  Canada,
[CL3] = null,  [R4]= have,</NQS>
<TYPE>COUNT:LIST</TYPE>
</QALDquestions>
<QALDquestions id="249">
<Ques>In which studio did the Beatles record their first album?</Ques>
<SPARQL>empty</SPARQL>
<NQS>[WH] = which, [R1] = did, [D] =  studio, [R2] = , [I1_1] =  Beatles,
[CL2] = null,  [R3]= record their, [I2_1] =  first album,
[CL3] = null,  [R4]= In,</NQS>
<TYPE/>
</QALDquestions>
<QALDquestions id="234">
<Ques>Who was the first to climb Mount Everest?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Mount_Everest&gt; &lt;http://dbpedia.org/ontology/firstAscentPerson&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = was, [D] = the  first, [R2] = to climb, [I] =  Mount Everest</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="204">
<Ques>How many programming languages are there?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/ProgrammingLanguage&gt; . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(), [R2] = are , [I] =  programming languages</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="242">
<Ques>What is the official color of the University of Oxford?</Ques>
<SPARQL>SELECT DISTINCT ?string WHERE {  &lt;http://dbpedia.org/resource/University_of_Oxford&gt; &lt;http://dbpedia.org/ontology/officialSchoolColour&gt; ?string . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  official color, [R2] = of, [I] = the  University of Oxford</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="250">
<Ques>How many gold medals did Michael Phelps win at the 2008 Olympics?</Ques>
<SPARQL>empty</SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(gold medals), [R2] = did , [I1_1] =  Michael Phelps,
[CL2] = null,  [R3]= win at, [I2_1] =  2008 Olympics</NQS>
<TYPE/>
</QALDquestions>
<QALDquestions id="235">
<Ques>To which artistic movement did the painter of The Three Dancers belong?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/The_Three_Dancers&gt; &lt;http://dbpedia.org/ontology/author&gt; ?person .  ?person &lt;http://dbpedia.org/ontology/movement&gt; ?uri . } </SPARQL>
<NQS>[WH] = which, [R1] = did, [D] =  artistic movement, [R2] = , [I1_1] =  painter,
[CL2] = null,  [R3]= of, [I2_1] =  Three Dancers,
[CL3] = null,  [R4]= belong To,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="211">
<Ques>Give me all animals that are extinct.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Animal&gt; .  ?uri &lt;http://dbpedia.org/ontology/conservationStatus&gt; 'EX'^^&lt;http://www.w3.org/2001/XMLSchema#string&gt; . }</SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  animals,
[CL2] = that, [R3]= are, [I2_1] =  extinct</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="223">
<Ques>Does Abraham Lincoln's death place have a website?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Abraham_Lincoln&gt; &lt;http://dbpedia.org/ontology/deathPlace&gt; ?p .  ?p &lt;http://dbpedia.org/property/website&gt; ?w . } </SPARQL>
<NQS>[Concepts] = [death place, Abraham Lincoln, a website], [Roles] = [of, have]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="244">
<Ques>How deep is Lake Chiemsee?</Ques>
<SPARQL>SELECT DISTINCT ?n WHERE {  &lt;http://dbpedia.org/resource/Chiemsee&gt; &lt;http://dbpedia.org/ontology/depth&gt; ?n . } </SPARQL>
<NQS>[WH] = How, [R1] = , [D] =  DataProperty(deep), [R2] = is , [I] =  Lake Chiemsee</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="240">
<Ques>Give me the grandchildren of Elvis Presley.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE { &lt;http://dbpedia.org/resource/Elvis_Presley&gt; &lt;http://dbpedia.org/ontology/child&gt; ?child . ?child &lt;http://dbpedia.org/ontology/child&gt; ?uri . }</SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  grandchildren,
[CL2] = null,  [R3]= of, [I2_1] =  Elvis Presley</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="210">
<Ques>Who is the youngest Darts player?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/DartsPlayer&gt; .  ?uri &lt;http://dbpedia.org/ontology/birthDate&gt; ?date . } ORDER BY DESC(?date) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] =  DataProperty (Person), [R2] = , [I] = the  youngest Darts player</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="221">
<Ques>Where was Bach born?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Johann_Sebastian_Bach&gt; &lt;http://dbpedia.org/ontology/birthPlace&gt; ?uri . } </SPARQL>
<NQS>[WH] = Where, [R1] = was, [D] =  location(Bach), [R2] = born, [I] =  Bach</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="232">
<Ques>In which countries can you pay using the West African CFA franc?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/currency&gt; &lt;http://dbpedia.org/resource/West_African_CFA_franc&gt; . } </SPARQL>
<NQS>[WH] = which, [R1] = can, [D] =  countries, [R2] = you pay, [I1_1] =  using [CC]  [I1_3] =  West African CFA [CC]  [I1_4] =  franc,
[CL2] = null,  [R3]= In,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="225">
<Ques>What are the top-10 action role-playing video games according to IGN?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://purl.org/dc/terms/subject&gt; &lt;http://dbpedia.org/resource/Category:Action_role-playing_video_games&gt; .  ?uri &lt;http://dbpedia.org/property/ign&gt; ?score . } ORDER BY DESC(?score) LIMIT 10 </SPARQL>
<NQS>[WH] = What, [R1] = are, [D] = the  top-10 action role-playing video, [R2] = , [I1_1] =  games [CC]  [I1_3] =  according,
[CL2] = null,  [R3]= to, [I2_1] =  IGN</NQS>
<TYPE>LIST:RANK</TYPE>
</QALDquestions>
<QALDquestions id="214">
<Ques>What is the most frequent cause of death?</Ques>
<SPARQL>SELECT DISTINCT ?x WHERE {  ?uri &lt;http://dbpedia.org/ontology/deathCause&gt; ?x . } ORDER BY DESC(COUNT(DISTINCT ?uri)) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  frequent cause, [R2] = of, [I] =  death</NQS>
<TYPE>LIST:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="207">
<Ques>Does the Isar flow into a lake?</Ques>
<SPARQL>ASK WHERE {  ?x &lt;http://dbpedia.org/ontology/inflow&gt; &lt;http://dbpedia.org/resource/Isar&gt; .  ?x &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Lake&gt; . } </SPARQL>
<NQS>[Concepts] = [the Isar flow, a lake], [Roles] = [into]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="218">
<Ques>Give me all films produced by Steven Spielberg with a budget of at least $80 million.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Film&gt; .  ?uri &lt;http://dbpedia.org/ontology/director&gt; &lt;http://dbpedia.org/resource/Steven_Spielberg&gt; .  ?uri &lt;http://dbpedia.org/ontology/budget&gt; ?b .  FILTER( xsd:double(?b) &gt;= 8.0E7 ) } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  films,
[CL2] = null,  [R3]= produced by, [I2_1] =  Steven Spielberg,
[CL3] = null,  [R4]= with, [I3_1] = a  a budget,
[CL4] = null,  [R5]= of at, [I4_1] = least  least $ 80 million</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="241">
<Ques>Give me all writers that won the Nobel Prize in literature.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Writer&gt; .  ?uri &lt;http://dbpedia.org/ontology/award&gt; &lt;http://dbpedia.org/resource/Nobel_Prize_in_Literature&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  writers,
[CL2] = that, [R3]= won, [I2_1] =  Nobel Prize,
[CL3] = null,  [R4]= in, [I3_1] =  literature</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="201">
<Ques>Give me all taikonauts.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Astronaut&gt; .  ?uri &lt;http://dbpedia.org/ontology/nationality&gt; &lt;http://dbpedia.org/resource/China&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I] =  taikonauts</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="212">
<Ques>How many pages does War and Peace have?</Ques>
<SPARQL>SELECT DISTINCT ?n WHERE {  &lt;http://dbpedia.org/resource/War_and_Peace&gt; &lt;http://dbpedia.org/ontology/numberOfPages&gt; ?n . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(pages), [R2] = does , [I1_1] =  War [CC]  [I1_3] =  Peace,
[CL2] = null,  [R3]= have,</NQS>
<TYPE>COUNT:LIST</TYPE>
</QALDquestions>
<QALDquestions id="217">
<Ques>What is the bridge with the longest span?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Bridge&gt; .  ?uri &lt;http://dbpedia.org/ontology/mainspan&gt; ?s . } ORDER BY DESC(?s) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  bridge, [R2] = with, [I] = the  longest span</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="247">
<Ques>Give me all actors called Baldwin.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri foaf:surname 'Baldwin'@en . { ?uri &lt;http://dbpedia.org/ontology/occupation&gt; &lt;http://dbpedia.org/resource/Actor&gt; . } UNION { ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Actor&gt; . } } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  actors,
[CL2] = null,  [R3]= called, [I2_1] =  Baldwin</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="216">
<Ques>Who is the tallest player of the Atlanta Falcons?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/team&gt; &lt;http://dbpedia.org/resource/Atlanta_Falcons&gt; .  ?uri &lt;http://dbpedia.org/ontology/height&gt; ?h . } ORDER BY DESC(?h) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  tallest player, [R2] = of, [I] = the  Atlanta Falcons</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="208">
<Ques>Which rivers flow into a German lake?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/River&gt; .  ?x &lt;http://dbpedia.org/ontology/inflow&gt; ?uri .  ?x &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Lake&gt; .  ?x &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Germany&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  rivers, [R2] = flow into, [I] = a  Germn lke</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="238">
<Ques>How many James Bond movies are there?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/JamesBondFilms&gt; . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(James Bond), [R2] = are , [I] =  movies</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="246">
<Ques>Which rockets were launched from Baikonur?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Rocket&gt; .  ?uri &lt;http://dbpedia.org/ontology/launchSite&gt; &lt;http://dbpedia.org/resource/Baikonur_Cosmodrome&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = were, [D] =  rockets, [R2] = launched from, [I] =  Baikonur</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="236">
<Ques>Which pope succeeded John Paul II?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Pope_John_Paul_II&gt; &lt;http://dbpedia.org/property/successor&gt; ?uri . } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  pope, [R2] = succeeded, [I] =  John Paul II</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="205">
<Ques>Give me all Dutch parties.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/PoliticalParty&gt; .  ?uri &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Netherlands&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I] =  Dutch parties</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="230">
<Ques>When is Halloween?</Ques>
<SPARQL>SELECT DISTINCT ?date WHERE {  &lt;http://dbpedia.org/resource/Halloween&gt; &lt;http://dbpedia.org/property/date&gt; ?date . } </SPARQL>
<NQS>[WH] = When, [R1] = is, [D] =  time(Halloween), [R2] = , [I] =  Halloween</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="243">
<Ques>Give me all Swedish oceanographers.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/field&gt; &lt;http://dbpedia.org/resource/Oceanography&gt; .  ?uri &lt;http://dbpedia.org/ontology/birthPlace&gt; &lt;http://dbpedia.org/resource/Sweden&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I] =  Swedish oceanographers</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="226">
<Ques>Give me all actors who were born in Berlin.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Actor&gt; .  ?uri &lt;http://dbpedia.org/ontology/birthPlace&gt; &lt;http://dbpedia.org/resource/Berlin&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  actors,
[CL2] = who, [R3]= were born in, [I2_1] =  Berlin</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="237">
<Ques>What was the last movie with Alec Guinness?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Film&gt; .  ?uri &lt;http://dbpedia.org/ontology/starring&gt; &lt;http://dbpedia.org/resource/Alec_Guinness&gt; .  ?uri &lt;http://dbpedia.org/ontology/releaseDate&gt; ?date . } ORDER BY DESC(?date) LIMIT 1 </SPARQL>
<NQS>[WH] = What, [R1] = was, [D] = the  last movie, [R2] = with, [I] =  Alec Guinness</NQS>
<TYPE>LIST:RANK</TYPE>
</QALDquestions>
<QALDquestions id="203">
<Ques>Which poet wrote the most books?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/occupation&gt; &lt;http://dbpedia.org/resource/Poet&gt; .  ?x &lt;http://dbpedia.org/ontology/author&gt; ?uri .  ?x &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Book&gt; . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  poet, [R2] = wrote, [I] =  books</NQS>
<TYPE>LIST:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="202">
<Ques>How many languages are spoken in Colombia?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Language&gt; .  &lt;http://dbpedia.org/resource/Colombia&gt; &lt;http://dbpedia.org/ontology/language&gt; ?uri . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(languages), [R2] = are spoken in, [I] =  Colombia</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="248">
<Ques>What does ICRO stand for?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/abbreviation&gt; 'ICRO'^^&lt;http://www.w3.org/2001/XMLSchema#string&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = does, [D] =  definition(ICRO), [R2] = stand for, [I] =  ICRO</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="228">
<Ques>What was Brazil's lowest rank in the FIFA World Ranking?</Ques>
<SPARQL>SELECT DISTINCT ?n WHERE {  &lt;http://dbpedia.org/resource/Brazil_national_football_team&gt; &lt;http://dbpedia.org/property/fifaMin&gt; ?n . } </SPARQL>
<NQS>[WH] = What, [R1] = was, [D] =  lowest rank, [R2] = of, [I1_1] =  Brazil,
[CL2] = null,  [R3]= in, [I2_1] =  FIFA World [CC]  [I2_2] =  Ranking</NQS>
<TYPE>RANK:LIST</TYPE>
</QALDquestions>
<QALDquestions id="233">
<Ques>Give me the capitals of all countries that the Himalayas run through.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Himalayas&gt; &lt;http://dbpedia.org/property/country&gt; ?country .  ?country &lt;http://dbpedia.org/ontology/capital&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  capitals,
[CL2] = null,  [R3]= of, [I2_1] = all  all countries,
[CL3] = that, [R4]= that, [I3_1] =  Himalayas,
[CL4] = null,  [R5]= run through,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="239">
<Ques>Which actor played Chewbacca?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Chewbacca&gt; &lt;http://dbpedia.org/property/portrayer&gt; ?uri . } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  actor, [R2] = played, [I] =  Chewbacca</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="213">
<Ques>Which ingredients do I need for carrot cake?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Carrot_cake&gt; &lt;http://dbpedia.org/ontology/ingredient&gt; ?uri . } </SPARQL>
<NQS>[WH] = Which, [R1] = do, [D] =  ingredients, [R2] = I need for, [I] =  carrot cake</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="219">
<Ques>Is Cola a beverage?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Cola&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Beverage&gt; . } </SPARQL>
<NQS>[Concepts] = [Cola a beverage], [Roles] = []</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="215">
<Ques>Who has Tom Cruise been married to?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/spouse&gt; &lt;http://dbpedia.org/resource/Tom_Cruise&gt; . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] =  DataProperty (Person), [R2] = has been married to, [I] =  Tom Cruise</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="222">
<Ques>Which of Tim Burton's films had the highest budget?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/director&gt; &lt;http://dbpedia.org/resource/Tim_Burton&gt; .  ?uri &lt;http://dbpedia.org/ontology/budget&gt; ?b . } ORDER BY ?b OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] = the films had  highest budget, [R2] = of, [I1_1] =  Tim Burton,
[CL2] = null,  [R3]= of,</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="209">
<Ques>How heavy is Jupiter's lightest moon?</Ques>
<SPARQL>SELECT DISTINCT ?n WHERE {  ?uri &lt;http://dbpedia.org/property/satelliteOf&gt; &lt;http://dbpedia.org/resource/Jupiter&gt; .  ?uri &lt;http://dbpedia.org/ontology/mass&gt; ?n . } ORDER BY ASC(?n) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = How, [R1] = , [D] =  DataProperty(heavy), [R2] = is , [I1_1] =  lightest moon,
[CL2] = null,  [R3]= of, [I2_1] =  Jupiter</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="220">
<Ques>Which actor was casted in the most movies?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Actor&gt; .  ?f &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Film&gt; .  ?f &lt;http://dbpedia.org/ontology/starring&gt; ?uri . } ORDER BY DESC(COUNT(DISTINCT(?f))) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Which, [R1] = was, [D] =  actor, [R2] = casted in, [I] =  movies</NQS>
<TYPE>LIST:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="245">
<Ques>Is James Bond married?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/James_Bond&gt; &lt;http://dbpedia.org/ontology/spouse&gt; ?uri . } </SPARQL>
<NQS>[Concepts] = [James Bond], [Roles] = [married]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="229">
<Ques>Give me all Australian metalcore bands.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Band&gt; .  ?uri &lt;http://dbpedia.org/ontology/genre&gt; &lt;http://dbpedia.org/resource/Metalcore&gt; . { ?uri &lt;http://dbpedia.org/ontology/hometown&gt; &lt;http://dbpedia.org/resource/Australia&gt; . } UNION { ?uri &lt;http://dbpedia.org/ontology/hometown&gt; ?h .  ?h &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Australia&gt; . } } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  Australian metalcore [CC]  [I1_3] =  bands</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="227">
<Ques>Give me all actors who were born in Paris after 1950.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Actor&gt; .  ?uri &lt;http://dbpedia.org/ontology/birthPlace&gt; &lt;http://dbpedia.org/resource/Paris&gt; .  ?uri &lt;http://dbpedia.org/ontology/birthDate&gt; ?date .  FILTER ( ?date &gt;= xsd:dateTime('1950-12-31T00:00:00Z')) } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  actors,
[CL2] = who, [R3]= were born in, [I2_1] =  Paris,
[CL3] = null,  [R4]= after, [I3_1] =  1950</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="206">
<Ques>When was Olof Palme shot?</Ques>
<SPARQL>SELECT DISTINCT ?date WHERE {  &lt;http://dbpedia.org/resource/Olof_Palme&gt; &lt;http://dbpedia.org/ontology/deathDate&gt; ?date . } </SPARQL>
<NQS>[WH] = When, [R1] = was, [D] =  time(Olof Palme shot), [R2] = , [I] =  Olof Palme shot</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="224">
<Ques>Who are the four youngest MVP basketball players?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/BasketballPlayer&gt; .  ?uri &lt;http://dbpedia.org/ontology/birthDate&gt; ?date.  ?uri &lt;http://dbpedia.org/property/highlights&gt; ?h .  FILTER regex(?h,'MVP') } ORDER BY DESC(?date) OFFSET 0 LIMIT 4 </SPARQL>
<NQS>[WH] = Who, [R1] = are, [D] =  four youngest MVP, [R2] = , [I] =  basketball players</NQS>
<TYPE>RANK:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="251">
<Ques>Which companies have more than 1 million employees?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Company&gt; . { ?uri &lt;http://dbpedia.org/ontology/numberOfEmployees&gt; ?n . } UNION { ?uri &lt;http://dbpedia.org/property/numEmployees&gt; ?n . } FILTER ( ?n &gt; 1000000 ) } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  companies, [R2] = have more than, [I] =  1 million employees</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="252">
<Ques>Give all swimmers that were born in Moscow.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Swimmer&gt; .  ?uri &lt;http://dbpedia.org/ontology/birthPlace&gt; &lt;http://dbpedia.org/resource/Moscow&gt; . } </SPARQL>
<NQS>[WH] = that, [R1] = were, [D] =  Moscow, [R2] = born in, [I1_1] =  all swimmers,
[CL2] = null,  [R3]= Give,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="253">
<Ques>Who was called Rodzilla?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/property/nickname&gt; "Rodzilla"@en . } </SPARQL>
<NQS>[WH] = Who, [R1] = was, [D] =  DataProperty (Person), [R2] = called, [I] =  Rodzilla</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="254">
<Ques>Show me the book that Muhammad Ali wrote.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Book&gt; .  ?uri &lt;http://dbpedia.org/ontology/author&gt; &lt;http://dbpedia.org/resource/Muhammad_Ali&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  book,
[CL2] = that, [R3]= wrote, [I2_1] =  Muhammad Ali</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="255">
<Ques>How many museums does Paris have?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Museum&gt; .  ?uri &lt;http://dbpedia.org/ontology/location&gt; &lt;http://dbpedia.org/resource/Paris&gt; . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(museums), [R2] = does have, [I] =  Paris</NQS>
<TYPE>COUNT:LIST</TYPE>
</QALDquestions>
<QALDquestions id="256">
<Ques>Which city has the most inhabitants?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/City&gt; .  ?uri &lt;http://dbpedia.org/ontology/populationTotal&gt; ?pop . } ORDER BY DESC(?pop) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  city, [R2] = has, [I] =  inhabitants</NQS>
<TYPE>LIST:RANK</TYPE>
</QALDquestions>
<QALDquestions id="257">
<Ques>Which city has the least inhabitants?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/City&gt; .  ?uri &lt;http://dbpedia.org/ontology/populationTotal&gt; ?pop . } ORDER BY ASC(?pop) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  city, [R2] = has, [I] = the  least inhabitants</NQS>
<TYPE>LIST:RANK</TYPE>
</QALDquestions>
<QALDquestions id="258">
<Ques>Give me all the TV shows with Neil Patrick Harris.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/TelevisionShow&gt; .  ?uri &lt;http://dbpedia.org/ontology/starring&gt; &lt;http://dbpedia.org/resource/Neil_Patrick_Harris&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  TV,
[CL2] = null,  [R3]= shows with, [I2_1] =  Neil Patrick Harris</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="259">
<Ques>Who wrote The Hunger Games?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/The_Hunger_Games&gt; &lt;http://dbpedia.org/property/creator&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] =  DataProperty (Person), [R2] = wrote, [I] = the The Hunger Games</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="260">
<Ques>Show a list of soccer clubs that play in the Bundesliga.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/SoccerClub&gt; .  ?uri &lt;http://dbpedia.org/ontology/league&gt; &lt;http://dbpedia.org/resource/Bundesliga&gt; . } </SPARQL>
<NQS>[WH] = that, [R1] = , [D] = the  Bundesliga, [R2] = play in, [I1_1] =  Show a list,
[CL2] = null,  [R3]= of, [I2_1] =  soccer clubs</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="261">
<Ques>What country is Mount Everest in?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Mount_Everest&gt; &lt;http://dbpedia.org/ontology/locatedInArea&gt; ?uri .  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Country&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  country, [R2] = in, [I] =  Mount Everest</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="262">
<Ques>Who is the founder of Penguin Books?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Penguin_Books&gt; &lt;http://dbpedia.org/ontology/founder&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  founder, [R2] = of, [I] =  Penguin Books</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="263">
<Ques>Which programming languages influenced Javascript?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/ProgrammingLanguage&gt; .  ?uri &lt;http://dbpedia.org/ontology/influenced&gt; &lt;http://dbpedia.org/resource/JavaScript&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  programming languages, [R2] = influenced, [I] =  Javascript</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="264">
<Ques>Did Che Guevara have children?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Che_Guevara&gt; &lt;http://dbpedia.org/ontology/child&gt; ?uri . } </SPARQL>
<NQS>[Concepts] = [Che Guevara, children], [Roles] = [have]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="265">
<Ques>List all the musicals with music by Leonard Bernstein.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Musical&gt; .  ?uri &lt;http://dbpedia.org/ontology/musicBy&gt; &lt;http://dbpedia.org/resource/Leonard_Bernstein&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  musicals,
[CL2] = null,  [R3]= with, [I2_1] =  music,
[CL3] = null,  [R4]= by, [I3_1] =  Leonard Bernstein</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="266">
<Ques>Show me all the breweries in Australia.</Ques>
<SPARQL>SELECT DISTINCT ?uri ?x WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Brewery&gt; . { ?uri &lt;http://dbpedia.org/ontology/location&gt; &lt;http://dbpedia.org/resource/Australia&gt; . } UNION { ?uri &lt;http://dbpedia.org/ontology/location&gt; ?x .  ?x &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Australia&gt; . } } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  breweries,
[CL2] = null,  [R3]= in, [I2_1] =  Australia</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="267">
<Ques>When was the Titanic completed?</Ques>
<SPARQL>SELECT DISTINCT ?date WHERE {  &lt;http://dbpedia.org/resource/RMS_Titanic&gt; &lt;http://dbpedia.org/ontology/completionDate&gt; ?date . } </SPARQL>
<NQS>[WH] = When, [R1] = was, [D] =  time( Titanic), [R2] = completed, [I] = the  Titanic</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="268">
<Ques>How much did Pulp Fiction cost?</Ques>
<SPARQL>SELECT DISTINCT ?n WHERE {  &lt;http://dbpedia.org/resource/Pulp_Fiction&gt; &lt;http://dbpedia.org/ontology/budget&gt; ?n . } </SPARQL>
<NQS>[WH] = How much, [R1] = , [D] =  quantity(), [R2] = did cost, [I] =  Pulp Fiction</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="269">
<Ques>How many airlines are there?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Airline&gt; . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(), [R2] = are , [I] =  airlines</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="270">
<Ques>Who played Agent Smith in Matrix?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Agent_Smith&gt; &lt;http://dbpedia.org/property/portrayer&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] =  Agent Smith, [R2] = played, [I1_1] =  Matrix,
[CL2] = null,  [R3]= in,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="271">
<Ques>How much carbs does peanut butter have?</Ques>
<SPARQL>SELECT DISTINCT ?carbs WHERE {  &lt;http://dbpedia.org/resource/Peanut_butter&gt; &lt;http://dbpedia.org/property/carbs&gt; ?carbs . } </SPARQL>
<NQS>[WH] = How much, [R1] = , [D] =  quantity(carbs), [R2] = does have, [I] =  peanut butter</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="272">
<Ques>Which book has the most pages?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Book&gt; .  ?uri &lt;http://dbpedia.org/ontology/numberOfPages&gt; ?n . } ORDER BY DESC(?n) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  book, [R2] = has, [I] =  pages</NQS>
<TYPE>LIST:RANK</TYPE>
</QALDquestions>
<QALDquestions id="273">
<Ques>Which bridges cross the Seine?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Bridge&gt; .  ?uri &lt;http://dbpedia.org/ontology/crosses&gt; &lt;http://dbpedia.org/resource/Seine&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  bridges, [R2] = cross, [I] = the  Seine</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="274">
<Ques>Who is the mayor of the capital of French Polynesia?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/French_Polynesia&gt; &lt;http://dbpedia.org/ontology/capital&gt; ?x .  ?x &lt;http://dbpedia.org/ontology/mayor&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  mayor, [R2] = of, [I1_1] =  capital,
[CL2] = null,  [R3]= of, [I2_1] =  French Polynesia</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="275">
<Ques>When did Dracula's creator die?</Ques>
<SPARQL>SELECT DISTINCT ?date WHERE {  &lt;http://dbpedia.org/resource/Count_Dracula&gt; &lt;http://dbpedia.org/ontology/creator&gt; ?x .  ?x &lt;http://dbpedia.org/ontology/deathDate&gt; ?date . } </SPARQL>
<NQS>[WH] = When, [R1] = did, [D] =  creator, [R2] = of, [I1_1] =  Dracula,
[CL2] = null,  [R3]= die,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="276">
<Ques>What is the location of the Houses of Parliament?</Ques>
<SPARQL>SELECT ?uri WHERE {  &lt;http://dbpedia.org/resource/Palace_of_Westminster&gt; &lt;http://dbpedia.org/ontology/location&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  location, [R2] = of, [I1_1] =  Houses,
[CL2] = null,  [R3]= of, [I2_1] =  Parliament</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="277">
<Ques>Show me all English Gothic buildings in Kent.</Ques>
<SPARQL>SELECT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Building&gt; .  ?uri &lt;http://dbpedia.org/ontology/architecturalStyle&gt; &lt;http://dbpedia.org/resource/English_Gothic_architecture&gt; .  ?uri &lt;http://dbpedia.org/ontology/location&gt; &lt;http://dbpedia.org/resource/Kent&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  all English Gothic buildings,
[CL2] = null,  [R3]= in, [I2_1] =  Kent</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="278">
<Ques>Who was the pope that founded the Vatican Television?</Ques>
<SPARQL>SELECT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Pope&gt; .  &lt;http://dbpedia.org/resource/Vatican_Television_Center&gt; &lt;http://dbpedia.org/ontology/foundedBy&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = was, [D] =  DataProperty (Person), [R2] = , [I1_1] = the  pope,
[CL2] = that, [R3]= founded, [I2_1] =  Vatican Television</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="279">
<Ques>What airlines are part of the SkyTeam alliance?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Airline&gt; .  { ?uri &lt;http://dbpedia.org/property/alliance&gt; &lt;http://dbpedia.org/resource/SkyTeam&gt; . }  UNION  { ?uri &lt;http://dbpedia.org/ontology/Alliance&gt; &lt;http://dbpedia.org/resource/SkyTeam&gt; . } } </SPARQL>
<NQS>[WH] = What, [R1] = are, [D] =  airlines, [R2] = , [I1_1] =  part,
[CL2] = null,  [R3]= of, [I2_1] =  SkyTeam alliance</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="280">
<Ques>What is the total population of Melbourne, Florida?</Ques>
<SPARQL>SELECT ?uri WHERE {  &lt;http://dbpedia.org/resource/Melbourne,_Florida&gt; &lt;http://dbpedia.org/ontology/populationTotal&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  total population, [R2] = of, [I1_1] =  Melbourne [CC]  [I1_3] =  Florida</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="281">
<Ques>Which airports does Yeti Airlines serve?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Yeti_Airlines&gt; &lt;http://dbpedia.org/ontology/targetAirport&gt; ?uri . }</SPARQL>
<NQS>[WH] = Which, [R1] = does, [D] =  airports, [R2] = serve, [I] =  Yeti Airlines</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="282">
<Ques>In which year was Rachel Stevens born?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Rachel_Stevens&gt; &lt;http://dbpedia.org/ontology/birthYear&gt; ?uri . } </SPARQL>
<NQS>[WH] = which, [R1] = was, [D] =  year, [R2] = born In, [I] =  Rachel Stevens</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="283">
<Ques>Where was JFK assassinated?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/John_F._Kennedy&gt; &lt;http://dbpedia.org/ontology/deathPlace&gt; ?uri . } </SPARQL>
<NQS>[WH] = Where, [R1] = was, [D] =  location(JFK), [R2] = assassinated, [I] =  JFK</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="284">
<Ques>How many politicians graduated from Columbia University?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri &lt;http://dbpedia.org/ontology/profession&gt; &lt;http://dbpedia.org/resource/Politician&gt; .  ?uri &lt;http://dbpedia.org/ontology/almaMater&gt; &lt;http://dbpedia.org/resource/Columbia_University&gt; . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(politicians), [R2] =  graduated from, [I] =  Columbia University</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="285">
<Ques>Which scientist is known for the Manhattan Project and the Nobel Peace Prize?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/knownFor&gt; &lt;http://dbpedia.org/resource/Manhattan_Project&gt; .  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Scientist&gt; .  ?uri &lt;http://dbpedia.org/ontology/knownFor&gt; &lt;http://dbpedia.org/resource/Nobel_Peace_Prize&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = is, [D] =  scientist, [R2] = known for, [I1_1] =  Manhattan Project [CC]  [I1_3] =  Nobel Peace Prize</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="286">
<Ques>What is the highest volcano in Africa?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Volcano&gt; .  ?uri &lt;http://dbpedia.org/ontology/locatedInArea&gt; ?area .  ?area &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/AfricanCountries&gt; .  ?uri &lt;http://dbpedia.org/ontology/elevation&gt; ?elevation . } ORDER BY DESC(?elevation) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  highest volcano, [R2] = in, [I] =  Africa</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="287">
<Ques>Which beer originated in Ireland?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/property/type&gt; &lt;http://dbpedia.org/resource/Beer&gt; .  ?uri &lt;http://dbpedia.org/property/origin&gt; "Ireland"@en . } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  beer, [R2] = originated in, [I] =  Ireland</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="288">
<Ques>What are the specialities of the UNC Health Care?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/UNC_Health_Care&gt; &lt;http://dbpedia.org/property/speciality&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = are, [D] = the  specialities, [R2] = of, [I] = the  UNC Health Care</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="289">
<Ques>Who is the owner of Facebook?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Facebook&gt; &lt;http://dbpedia.org/ontology/foundedBy&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  owner, [R2] = of, [I] =  Facebook</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="290">
<Ques>From which region is the Melon de Bourgogne?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Melon_de_Bourgogne&gt; &lt;http://dbpedia.org/ontology/wineRegion&gt; ?uri . } </SPARQL>
<NQS>[WH] = which, [R1] = is, [D] =  region, [R2] = , [I1_1] =  Melon,
[CL2] = null,  [R3]= de, [I2_1] =  Bourgogne,
[CL3] = null,  [R4]= From,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="291">
<Ques>Who was influenced by Socrates?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/influencedBy&gt; &lt;http://dbpedia.org/resource/Socrates&gt; . } </SPARQL>
<NQS>[WH] = Who, [R1] = was, [D] =  DataProperty (Person), [R2] = influenced by, [I] =  Socrates</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="292">
<Ques>Who was president of Pakistan in 1978?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/property/title&gt; &lt;http://dbpedia.org/resource/President_of_Pakistan&gt; .  ?uri &lt;http://dbpedia.org/property/years&gt; 1978 . } </SPARQL>
<NQS>[WH] = Who, [R1] = was, [D] =  president, [R2] = of, [I1_1] =  Pakistan,
[CL2] = null,  [R3]= in, [I2_1] =  1978</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="293">
<Ques>Give me English actors starring in Lovesick.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Lovesick&gt; &lt;http://dbpedia.org/ontology/starring&gt; ?uri .  { ?uri &lt;http://dbpedia.org/ontology/birthPlace&gt; &lt;http://dbpedia.org/resource/England&gt; . }  UNION  { ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/EnglishFilmActors&gt; . } } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  English actors [CC]  [I1_3] =  starring,
[CL2] = null,  [R3]= in, [I2_1] =  Lovesick</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="294">
<Ques>Give me all types of eating disorders.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/EatingDisorders&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  types,
[CL2] = null,  [R3]= of, [I2_1] =  eating disorders</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="295">
<Ques>Who was married to president Chirac?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Jacques_Chirac&gt; &lt;http://dbpedia.org/ontology/spouse&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = was, [D] =  president, [R2] = married to, [I] =  Chirac</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="296">
<Ques>What is the largest metropolitan area in Washington state?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Washington_(state)&gt; &lt;http://dbpedia.org/property/largestmetro&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  largest metropolitan area, [R2] = in, [I] =  Washington state</NQS>
<TYPE>RANK:LIST</TYPE>
</QALDquestions>
<QALDquestions id="297">
<Ques>Where in France is sparkling wine produced?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/wineProduced&gt; &lt;http://dbpedia.org/resource/Sparkling_wine&gt; .  ?uri &lt;http://dbpedia.org/ontology/location&gt; &lt;http://dbpedia.org/resource/France&gt; . } </SPARQL>
<NQS>[WH] = Where, [R1] = is, [D] =  France, [R2] = in, [I1_1] =  sparkling wine,
[CL2] = null,  [R3]= produced,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="298">
<Ques>Where did Hillel Slovak die?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Hillel_Slovak&gt; &lt;http://dbpedia.org/ontology/deathPlace&gt; ?uri . } </SPARQL>
<NQS>[WH] = Where, [R1] = did, [D] =  location(Hillel Slovak), [R2] = die, [I] =  Hillel Slovak</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="299">
<Ques>What is the timezone in San Pedro de Atacama?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/San_Pedro_de_Atacama&gt; &lt;http://dbpedia.org/ontology/timeZone&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  timezone, [R2] = in, [I] = a Sn Pedro de Atcm</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="300">
<Ques>In which city does the Chile Route 68 end?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Chile_Route_68&gt; &lt;http://dbpedia.org/ontology/routeEnd&gt; ?uri . } </SPARQL>
<NQS>[WH] = which, [R1] = does, [D] =  city, [R2] = , [I1_1] =  Chile Route [CC]  [I1_3] =  68,
[CL2] = null,  [R3]= end In,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="301">
<Ques>Give me all ESA astronauts.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Astronaut&gt; .  ?uri &lt;http://dbpedia.org/ontology/type&gt; &lt;http://dbpedia.org/resource/European_Space_Agency&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I] =  ESA astronauts</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="302">
<Ques>Give me all Swedish holidays.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Holiday&gt; .  ?uri &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Sweden&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I] =  Swedish holidays</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="303">
<Ques>Who is the youngest Pulitzer Prize winner?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/award&gt; &lt;http://dbpedia.org/resource/Pulitzer_Prize&gt; .  ?uri &lt;http://dbpedia.org/ontology/birthDate&gt; ?d . } ORDER BY DESC(?d) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] =  DataProperty (Person), [R2] = , [I] = the  youngest Pulitzer Prize winner</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="304">
<Ques>Which animals are critically endangered?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Animal&gt; .  ?uri &lt;http://dbpedia.org/ontology/conservationStatus&gt; 'CR'^^&lt;http://www.w3.org/2001/XMLSchema#string&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = are, [D] =  animals, [R2] = endangered, [I] =  critically</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="305">
<Ques>Which soccer players were born on Malta?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/SoccerPlayer&gt; .  ?uri &lt;http://dbpedia.org/ontology/birthPlace&gt; &lt;http://dbpedia.org/resource/Malta&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = were, [D] =  soccer players, [R2] = born on, [I] =  Malta</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="306">
<Ques>Did Arnold Schwarzenegger attend a university?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Arnold_Schwarzenegger&gt; &lt;http://dbpedia.org/ontology/almaMater&gt; ?x .  ?x &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/University&gt; . } </SPARQL>
<NQS>[Concepts] = [Arnold Schwarzenegger, a university], [Roles] = [attend]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="307">
<Ques>Which programming languages were influenced by Perl?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/ProgrammingLanguage&gt; . { ?uri &lt;http://dbpedia.org/ontology/influencedBy&gt; &lt;http://dbpedia.org/resource/Perl&gt; . } UNION { &lt;http://dbpedia.org/resource/Perl&gt; &lt;http://dbpedia.org/ontology/influenced&gt; ?uri . } } </SPARQL>
<NQS>[WH] = Which, [R1] = were, [D] =  programming languages, [R2] = influenced by, [I] =  Perl</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="308">
<Ques>Is Barack Obama a democrat?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Barack_Obama&gt; &lt;http://dbpedia.org/ontology/party&gt; &lt;http://dbpedia.org/resource/Democratic_Party_(United_States)&gt; . } </SPARQL>
<NQS>[Concepts] = [Barack Obama a democrat], [Roles] = []</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="309">
<Ques>How many children does Eddie Murphy have?</Ques>
<SPARQL>SELECT DISTINCT ?n WHERE {  &lt;http://dbpedia.org/resource/Eddie_Murphy&gt; &lt;http://dbpedia.org/property/children&gt; ?n . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(children), [R2] = does have, [I] =  Eddie Murphy</NQS>
<TYPE>COUNT:LIST</TYPE>
</QALDquestions>
<QALDquestions id="310">
<Ques>Who is the oldest child of Meryl Streep?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Meryl_Streep&gt; &lt;http://dbpedia.org/ontology/child&gt; ?uri .  ?uri &lt;http://dbpedia.org/ontology/birthDate&gt; ?d . } ORDER BY ASC(?d) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  oldest child, [R2] = of, [I] =  Meryl Streep</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="311">
<Ques>Who killed John Lennon?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Person&gt; .  ?uri &lt;http://dbpedia.org/property/conviction&gt; &lt;http://dbpedia.org/resource/Death_of_John_Lennon&gt; . } </SPARQL>
<NQS>[WH] = Who, [R1] = , [D] =  DataProperty (Person), [R2] = killed, [I] =  John Lennon</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="313">
<Ques>Which frequent flyer program has the most airlines?</Ques>
<SPARQL>SELECT ?uri WHERE {  ?airline &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Airline&gt; .  ?airline &lt;http://dbpedia.org/property/frequentFlyer&gt; ?uri.  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/FrequentFlyerPrograms&gt; . } ORDER BY DESC(COUNT(DISTINCT ?airline)) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  frequent flyer program, [R2] = has, [I] =  airlines</NQS>
<TYPE>LIST:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="312">
<Ques>In which city is Air China headquartered?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Air_China&gt; &lt;http://dbpedia.org/ontology/headquarter&gt; ?uri .  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/City108524735&gt; . } </SPARQL>
<NQS>[WH] = which, [R1] = is, [D] =  city, [R2] = headquartered In, [I] =  Air China</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="314">
<Ques>Which artists were born on the same date as Rachel Stevens?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE { ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Artist&gt; . &lt;http://dbpedia.org/resource/Rachel_Stevens&gt; &lt;http://dbpedia.org/property/dateOfBirth&gt; ?date . ?uri &lt;http://dbpedia.org/property/dateOfBirth&gt; ?date . } </SPARQL>
<NQS>[WH] = Which, [R1] = were, [D] =  artists, [R2] = born on, [I1_1] =  same date,
[CL2] = null,  [R3]= as, [I2_1] =  Rachel Stevens</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="315">
<Ques>How many scientists graduated from an Ivy League university?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE { ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Scientist&gt; . ?uri &lt;http://dbpedia.org/ontology/almaMater&gt; ?university . ?university &lt;http://dbpedia.org/ontology/affiliation&gt; &lt;http://dbpedia.org/resource/Ivy_League&gt; . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(scientists), [R2] =  graduated from, [I1_1] =  an Ivy League [CC]  [I1_3] =  university</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="316">
<Ques>Which types of grapes grow in Oregon?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE { &lt;http://dbpedia.org/resource/Oregon_wine&gt; &lt;http://dbpedia.org/ontology/growingGrape&gt; ?uri . } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  types, [R2] = of, [I1_1] =  grapes,
[CL2] = null,  [R3]= grow in, [I2_1] =  Oregon</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="317">
<Ques>Who is starring in Spanish movies produced by Benicio del Toro?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE { ?film &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Film&gt; . ?film &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Spain&gt; . ?film &lt;http://dbpedia.org/ontology/producer&gt; &lt;http://dbpedia.org/resource/Benicio_del_Toro&gt; . ?film &lt;http://dbpedia.org/ontology/starring&gt; ?uri . ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Person&gt; . } </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] =  starring, [R2] = in, [I1_1] =  Spanish movies,
[CL2] = null,  [R3]= produced by, [I2_1] =  Benicio del Toro</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="318">
<Ques>Who is the manager of Real Madrid?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE { &lt;http://dbpedia.org/resource/Real_Madrid_C.F.&gt; &lt;http://dbpedia.org/ontology/manager&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  manager, [R2] = of, [I] =  Real Madrid</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="319">
<Ques>Give me the currency of China.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE { &lt;http://dbpedia.org/resource/China&gt; &lt;http://dbpedia.org/ontology/currency&gt; ?uri . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  currency,
[CL2] = null,  [R3]= of, [I2_1] =  China</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="320">
<Ques>Which movies starring Mickey Rourke were directed by Guy Ritchie?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE { ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Film&gt; . ?uri &lt;http://dbpedia.org/ontology/starring&gt; &lt;http://dbpedia.org/resource/Mickey_Rourke&gt; . ?uri &lt;http://dbpedia.org/ontology/director&gt; &lt;http://dbpedia.org/resource/Guy_Ritchie&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = were, [D] =  movies, [R2] = , [I1_1] =  starring [CC]  [I1_3] =  Mickey Rourke,
[CL2] = null,  [R3]= directed by, [I2_1] =  Guy Ritchie</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="321">
<Ques>Is Darth Vader Luke’s father?</Ques>
<SPARQL>ASK WHERE { &lt;http://dbpedia.org/resource/Darth_Vader&gt; &lt;http://dbpedia.org/property/children&gt; "Luke Skywalker"@en . }</SPARQL>
<NQS>[Concepts] = [father, Darth Vader Luke], [Roles] = [of]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="322">
<Ques>How many companies were founded by the founder of Facebook?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  &lt;http://dbpedia.org/resource/Facebook&gt; &lt;http://dbpedia.org/ontology/foundedBy&gt; ?uri .  ?uri &lt;http://dbpedia.org/ontology/foundedBy&gt; ?uri . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(companies), [R2] = were founded by, [I1_1] =  founder,
[CL2] = null,  [R3]= of, [I2_1] =  Facebook</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="323">
<Ques>How many companies were founded in the same year as Google?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Company&gt; .  ?uri &lt;http://dbpedia.org/ontology/foundingYear&gt; ?year .  &lt;http://dbpedia.org/resource/Google&gt; &lt;http://dbpedia.org/ontology/foundingYear&gt; ?year . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(companies), [R2] = were founded in, [I1_1] =  same year,
[CL2] = null,  [R3]= as, [I2_1] =  Google</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="324">
<Ques>Which subsidiary of TUI Travel serves both Glasgow and Dublin?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE { &lt;http://dbpedia.org/resource/TUI_Travel&gt; &lt;http://dbpedia.org/ontology/subsidiary&gt; ?uri .  ?uri &lt;http://dbpedia.org/ontology/targetAirport&gt; &lt;http://dbpedia.org/resource/Glasgow_Airport&gt; . ?uri &lt;http://dbpedia.org/ontology/targetAirport&gt; &lt;http://dbpedia.org/resource/Dublin_Airport&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  subsidiary, [R2] = of, [I1_1] =  TUI Travel,
[CL2] = null,  [R3]= serves, [I2_1] = both  both Glasgow [CC]  [I2_2] =  Dublin</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="325">
<Ques>How many airlines are members of the Star Alliance?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Airline&gt; .  ?uri &lt;http://dbpedia.org/property/alliance&gt; &lt;http://dbpedia.org/resource/Star_Alliance&gt; . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(airlines), [R2] = members of are, [I] = the  Star Alliance</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="326">
<Ques>Give me all spacecrafts that flew to Mars.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Spacecraft&gt; .  ?uri &lt;http://dbpedia.org/property/planet&gt; &lt;http://dbpedia.org/resource/Mars&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  spacecrafts,
[CL2] = that, [R3]= flew to, [I2_1] =  Mars</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="327">
<Ques>Which musician wrote the most books?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/occupation&gt; &lt;http://dbpedia.org/resource/Musician&gt; .  ?x &lt;http://dbpedia.org/ontology/author&gt; ?uri .  ?x &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Book&gt; . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  musician, [R2] = wrote, [I] =  books</NQS>
<TYPE>LIST:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="328">
<Ques>Show me everyone who was born on Halloween.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Person&gt; . { ?uri &lt;http://dbpedia.org/ontology/birthDate&gt; ?date . } UNION { ?uri &lt;http://dbpedia.org/property/birthDate&gt; ?date . }  &lt;http://dbpedia.org/resource/Halloween&gt; &lt;http://dbpedia.org/property/date&gt; ?date . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  everyone,
[CL2] = who, [R3]= was born on, [I2_1] =  Halloween</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="329">
<Ques>Give me all Swiss non-profit organizations.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/ontology/type&gt; &lt;http://dbpedia.org/resource/Nonprofit_organization&gt; . { ?uri &lt;http://dbpedia.org/ontology/locationCountry&gt; &lt;http://dbpedia.org/resource/Switzerland&gt; . } UNION { ?uri &lt;http://dbpedia.org/ontology/location&gt; ?x .  ?x &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Switzerland&gt; . } } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I] =  Swiss non-profit organizations</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="330">
<Ques>In which country is Mecca located?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Mecca&gt; &lt;http://dbpedia.org/ontology/country&gt; ?uri . } </SPARQL>
<NQS>[WH] = which, [R1] = is, [D] =  country, [R2] = located In, [I] =  Mecca</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="331">
<Ques>What is the net income of Apple?</Ques>
<SPARQL>SELECT DISTINCT ?ni WHERE {  &lt;http://dbpedia.org/resource/Apple_Inc.&gt; &lt;http://dbpedia.org/ontology/netIncome&gt; ?ni . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  net income, [R2] = of, [I] =  Apple</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="332">
<Ques>What does the abbreviation FIFA stand for?</Ques>
<SPARQL>SELECT DISTINCT ?name WHERE {  &lt;http://dbpedia.org/resource/FIFA&gt; &lt;http://dbpedia.org/property/name&gt; ?name . } </SPARQL>
<NQS>[WH] = What, [R1] = does, [D] = the  abbreviation, [R2] = stand for, [I] =  FIFA</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="333">
<Ques>When did the Ming dynasty dissolve?</Ques>
<SPARQL>SELECT DISTINCT ?date WHERE {  &lt;http://dbpedia.org/resource/Ming_dynasty&gt; &lt;http://dbpedia.org/property/dateEnd&gt; ?date . } </SPARQL>
<NQS>[WH] = When, [R1] = did, [D] =  time( Ming dynasty), [R2] = dissolve, [I] = the  Ming dynasty</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="334">
<Ques>Which museum in New York has the most visitors?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Museum&gt; .  ?uri &lt;http://dbpedia.org/ontology/location&gt; &lt;http://dbpedia.org/resource/New_York_City&gt; .  ?uri &lt;http://dbpedia.org/ontology/numberOfVisitors&gt; ?num . } ORDER BY DESC(?num) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  museum, [R2] = in, [I1_1] =  New York,
[CL2] = null,  [R3]= has, [I2_1] =  visitors</NQS>
<TYPE>LIST:RANK</TYPE>
</QALDquestions>
<QALDquestions id="335">
<Ques>Is Lake Baikal bigger than the Great Bear Lake?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Lake_Baikal&gt; &lt;http://dbpedia.org/ontology/areaTotal&gt; ?a1 .  &lt;http://dbpedia.org/resource/Great_Bear_Lake&gt; &lt;http://dbpedia.org/ontology/areaTotal&gt; ?a2 .  FILTER (?a1 &gt; ?a2) } </SPARQL>
<NQS>[Concepts] = [Lake Baikal, bigger, the Great Bear Lake], [Roles] = [than]</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="336">
<Ques>Desserts from which country contain fish?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?x &lt;http://dbpedia.org/ontology/type&gt; &lt;http://dbpedia.org/resource/Dessert&gt; .  ?x &lt;http://dbpedia.org/ontology/origin&gt; ?uri .  ?x &lt;http://dbpedia.org/ontology/ingredient&gt; &lt;http://dbpedia.org/resource/Fish&gt; . } </SPARQL>
<NQS>[WH] = which, [R1] = , [D] =  country, [R2] = contain, [I1_1] =  fish Desserts,
[CL2] = null,  [R3]= from,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="337">
<Ques>What is the highest mountain in Italy?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Mountain&gt; .  ?uri &lt;http://dbpedia.org/ontology/locatedInArea&gt; &lt;http://dbpedia.org/resource/Italy&gt; .  ?uri &lt;http://dbpedia.org/ontology/elevation&gt; ?num . } ORDER BY DESC(?num) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  highest mountain, [R2] = in, [I] =  Italy</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="338">
<Ques>Where did the architect of the Eiffel Tower study?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Eiffel_Tower&gt; &lt;http://dbpedia.org/ontology/architect&gt; ?x .  ?x &lt;http://dbpedia.org/property/almaMater&gt; ?uri . } </SPARQL>
<NQS>[WH] = Where, [R1] = did, [D] = the  architect, [R2] = of, [I1_1] =  Eiffel Tower,
[CL2] = null,  [R3]= study,</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="339">
<Ques>Which Greek parties are pro-European?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/PoliticalParty&gt; .  ?uri &lt;http://dbpedia.org/ontology/country&gt; &lt;http://dbpedia.org/resource/Greece&gt; .  ?uri &lt;http://dbpedia.org/ontology/ideology&gt; &lt;http://dbpedia.org/resource/Pro-Europeanism&gt; . } </SPARQL>
<NQS>[WH] = Which, [R1] = are, [D] =  Greek parties, [R2] = , [I] =  pro-European</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="340">
<Ques>What is the height difference between Mount Everest and K2?</Ques>
<SPARQL>SELECT DISTINCT (?h1-?h2) WHERE {  &lt;http://dbpedia.org/resource/Mount_Everest&gt; &lt;http://dbpedia.org/ontology/elevation&gt; ?h1 .  &lt;http://dbpedia.org/resource/K2&gt; &lt;http://dbpedia.org/ontology/elevation&gt; ?h2 . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] = the  height difference, [R2] = between, [I1_1] =  Mount Everest [CC]  [I1_3] =  K2</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="341">
<Ques>Who is the mayor of Rotterdam?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Rotterdam&gt; &lt;http://dbpedia.org/ontology/leaderName&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  mayor, [R2] = of, [I] =  Rotterdam</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="342">
<Ques>In which city were the parents of Che Guevara born?</Ques>
<SPARQL>empty</SPARQL>
<NQS>[WH] = which, [R1] = were, [D] =  city, [R2] = , [I1_1] =  parents,
[CL2] = null,  [R3]= of, [I2_1] =  Che Guevara,
[CL3] = null,  [R4]= born In,</NQS>
<TYPE/>
</QALDquestions>
<QALDquestions id="343">
<Ques>How high is the lighthouse in Colombo?</Ques>
<SPARQL>SELECT DISTINCT ?num WHERE {  &lt;http://dbpedia.org/resource/Colombo_Lighthouse&gt; &lt;http://dbpedia.org/ontology/height&gt; ?num . } </SPARQL>
<NQS>[WH] = How, [R1] = , [D] =  DataProperty(high), [R2] = is , [I1_1] =  lighthouse,
[CL2] = null,  [R3]= in, [I2_1] =  Colombo</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="344">
<Ques>Are Taiko a kind of Japanese musical instruments?</Ques>
<SPARQL>ASK WHERE {  &lt;http://dbpedia.org/resource/Taiko&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/class/yago/JapaneseMusicalInstruments&gt; . } </SPARQL>
<NQS>[Concepts] = [Taiko, Japanese musical instruments], [Roles] = []</NQS>
<TYPE>BOOLEAN:BOOLEAN</TYPE>
</QALDquestions>
<QALDquestions id="345">
<Ques>How many ethnic groups live in Slovenia?</Ques>
<SPARQL>SELECT (COUNT(DISTINCT ?uri) as ?c) WHERE {  &lt;http://dbpedia.org/resource/Slovenia&gt; &lt;http://dbpedia.org/ontology/ethnicGroup&gt; ?uri . } </SPARQL>
<NQS>[WH] = How many, [R1] = , [D] =  count(ethnic groups), [R2] =  live in, [I] =  Slovenia</NQS>
<TYPE>COUNT:COUNT</TYPE>
</QALDquestions>
<QALDquestions id="346">
<Ques>List the seven kings of Rome.</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://dbpedia.org/property/title&gt; &lt;http://dbpedia.org/resource/King_of_Rome&gt; . } </SPARQL>
<NQS>[WH] = What, [R1] = is, [D] =  list, [R2] = of, [I1_1] =  seven kings,
[CL2] = null,  [R3]= of, [I2_1] =  Rome</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="347">
<Ques>Who were the parents of Queen Victoria?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  &lt;http://dbpedia.org/resource/Queen_Victoria&gt; &lt;http://dbpedia.org/ontology/parent&gt; ?uri . } </SPARQL>
<NQS>[WH] = Who, [R1] = were, [D] = the  parents, [R2] = of, [I1_1] =  Queen [CC]  [I1_3] =  Victoria</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="348">
<Ques>Who is the heaviest player of the Chicago Bulls?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Person&gt; .  ?uri &lt;http://dbpedia.org/ontology/weight&gt; ?num . { ?uri &lt;http://dbpedia.org/property/team&gt; &lt;http://dbpedia.org/resource/Chicago_Bulls&gt; . } UNION { ?uri &lt;http://dbpedia.org/property/draftTeam&gt; &lt;http://dbpedia.org/resource/Chicago_Bulls&gt; . } UNION { ?uri &lt;http://dbpedia.org/ontology/draftTeam&gt; &lt;http://dbpedia.org/resource/Chicago_Bulls&gt; . } } ORDER BY DESC(?num) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] = the  heaviest player, [R2] = of, [I] = the  Chicago Bulls</NQS>
<TYPE>RANK:RANK</TYPE>
</QALDquestions>
<QALDquestions id="349">
<Ques>Which volcanos in Japan erupted since 2000?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/Volcano&gt; .  ?uri &lt;http://dbpedia.org/ontology/locatedInArea&gt; &lt;http://dbpedia.org/resource/Japan&gt; .  ?uri &lt;http://dbpedia.org/ontology/eruptionYear&gt; ?date .  FILTER (year(?date) &gt;= 2000) } </SPARQL>
<NQS>[WH] = Which, [R1] = , [D] =  volcanos, [R2] = in, [I1_1] =  Japan,
[CL2] = null,  [R3]= erupted since, [I2_1] =  2000</NQS>
<TYPE>LIST:LIST</TYPE>
</QALDquestions>
<QALDquestions id="350">
<Ques>Who is the tallest basketball player?</Ques>
<SPARQL>SELECT DISTINCT ?uri WHERE {  ?uri &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://dbpedia.org/ontology/BasketballPlayer&gt; .  ?uri &lt;http://dbpedia.org/ontology/height&gt; ?num . } ORDER BY DESC(?num) OFFSET 0 LIMIT 1 </SPARQL>
<NQS>[WH] = Who, [R1] = is, [D] =  DataProperty (Person), [R2] = , [I] = the  tallest basketball player</NQS>
<TYPE>RANK:BOOLEAN</TYPE>
</QALDquestions>
</NQSforQALD>
